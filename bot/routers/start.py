from datetime import datetime

from aiogram import F, Router
from aiogram.filters import Command
from aiogram.fsm.context import FSMContext
from aiogram.types import (
    CallbackQuery,
    Message,
)
from loguru import logger

from bot.db.context import get_or_create_session
from bot.db.services import UsersService
from bot.settings import settings
from bot.utils.callbacks import StartCallback
from bot.utils.keyboards import get_commands_reply_keyboard, get_start_keyboard
from bot.utils.texts import (
    FULL_HELP_TEXT,
    HELP_TEXT,
    WELCOME_TEXT,
    get_privacy_policy_text,
    get_user_aggrement_text,
)

router = Router(name="start")


@router.message(Command("start"))
async def start_handler(message: Message, state: FSMContext) -> None:
    """Welcome message and user registration in the system."""
    await state.clear()

    if not message.from_user:
        await message.answer(
            "<b>‚ùå –¢–µ—Ö–Ω–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å–æ–æ–±—â–µ–Ω–∏—è</b>",
        )
        return

    user_id = message.from_user.id

    try:
        async with get_or_create_session() as session:
            service = UsersService(session)
            user_data = {
                "username": message.from_user.username,
                "first_name": message.from_user.first_name,
                "last_name": message.from_user.last_name,
            }

            await service.get_or_create_user(user_id, **user_data)

            welcome_text = WELCOME_TEXT.format(
                first_name=message.from_user.first_name or "–¥–æ—Ä–æ–≥–æ–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å",
                max_unsubscribed_patients=settings.MAX_UNSUBSCRIBED_PATIENTS,
                max_subscribed_patients=settings.MAX_SUBSCRIBED_PATIENTS,
                max_unsubscribed_schedules=settings.MAX_UNSUBSCRIBED_SCHEDULES,
                max_subscribed_schedules=settings.MAX_SUBSCRIBED_SCHEDULES,
            )

            # send welcome message with inline keyboard
            await message.answer(
                welcome_text,
                reply_markup=get_start_keyboard(),
            )

            # send additional message with keyboard
            await message.answer(
                "–¢–∞–∫ –∂–µ –≤—ã –º–æ–∂–µ—Ç–µ –≤–æ—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è –∫–ª–∞–≤–∏–∞—Ç—É—Ä–æ–π "
                "—Å –æ—Å–Ω–æ–≤–Ω—ã–º–∏ –æ–ø—Ü–∏—è–º–∏ –Ω–∏–∂–µ üîΩ",
                reply_markup=get_commands_reply_keyboard(),
            )

            logger.info(
                f"User {user_id} ({message.from_user.username}) started the bot",
            )

    except Exception as e:
        logger.error(
            f"Error processing the /start command for user {user_id}: {e}",
        )
        await message.answer(
            "<b>‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ –±–æ—Ç–∞.</b>\n\n"
            "<i>–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ –∏–ª–∏ –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É.</i>",
        )


@router.callback_query(F.data == StartCallback.START_HELP)
async def start_help_callback(callback: CallbackQuery) -> None:
    """Handler for the 'Help' button."""
    await callback.answer()

    if callback.message:
        await callback.message.answer(
            HELP_TEXT.format(
                max_unsubscribed_patients=settings.MAX_UNSUBSCRIBED_PATIENTS,
                max_subscribed_patients=settings.MAX_SUBSCRIBED_PATIENTS,
                max_unsubscribed_schedules=settings.MAX_UNSUBSCRIBED_SCHEDULES,
                max_subscribed_schedules=settings.MAX_SUBSCRIBED_SCHEDULES,
            ),
        )


@router.callback_query(F.data == StartCallback.START_AGREEMENT)
async def start_agreement_callback(callback: CallbackQuery) -> None:
    """Handler for the 'User Agreement' button."""
    await callback.answer()

    if callback.message:
        await callback.message.answer(get_user_aggrement_text())


@router.callback_query(F.data == StartCallback.START_PRIVACY)
async def start_privacy_callback(callback: CallbackQuery) -> None:
    """Handler for the 'Privacy Policy' button."""
    await callback.answer()

    if callback.message:
        await callback.message.answer(get_privacy_policy_text())


@router.message(Command("help"))
async def help_handler(message: Message) -> None:
    """Handler for the /help command."""
    await message.answer(
        FULL_HELP_TEXT.format(
            max_unsubscribed_patients=settings.MAX_UNSUBSCRIBED_PATIENTS,
            max_subscribed_patients=settings.MAX_SUBSCRIBED_PATIENTS,
            max_unsubscribed_schedules=settings.MAX_UNSUBSCRIBED_SCHEDULES,
            max_subscribed_schedules=settings.MAX_SUBSCRIBED_SCHEDULES,
        ),
    )


@router.message(F.text == "‚ÑπÔ∏è –ü–æ–º–æ—â—å")
async def help_button_handler(message: Message) -> None:
    """Handler for the '–ü–æ–º–æ—â—å' button."""
    await message.answer(
        FULL_HELP_TEXT.format(
            max_unsubscribed_patients=settings.MAX_UNSUBSCRIBED_PATIENTS,
            max_subscribed_patients=settings.MAX_SUBSCRIBED_PATIENTS,
            max_unsubscribed_schedules=settings.MAX_UNSUBSCRIBED_SCHEDULES,
            max_subscribed_schedules=settings.MAX_SUBSCRIBED_SCHEDULES,
        ),
    )


@router.message(Command("subscribe"))
async def subscribe_handler(message: Message, state: FSMContext) -> None:
    """Handler for command /subscribe to show payment contacts."""
    await state.clear()

    if not message.from_user:
        await message.answer(
            "<b>‚ùå –¢–µ—Ö–Ω–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å–æ–æ–±—â–µ–Ω–∏—è</b>",
        )
        return

    user_id = message.from_user.id

    try:
        async with get_or_create_session() as session:
            service = UsersService(session)
            user = await service.get_user_by_id(user_id)

            if not user:
                await message.answer(
                    "<b>‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω. "
                    "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /start –¥–ª—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏.</b>",
                )
                return

            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —É–∂–µ –∞–∫—Ç–∏–≤–Ω–∞—è –ø–æ–¥–ø–∏—Å–∫–∞
            if user.is_subscribed:
                sub_duration_text = (
                    (
                        "–ü–æ–¥–ø–∏—Å–∫–∞ –¥–µ–π—Å—Ç–≤—É–µ—Ç –¥–æ: "
                        f"{user.subscription_end.strftime('%d.%m.%Y %H:%M')}"
                    )
                    if user.subscription_end
                    else "–ë–µ–∑–ª–∏–º–∏—Ç–Ω–∞—è –ø–æ–¥–ø–∏—Å–∫–∞"
                )
                await message.answer(
                    "<b>‚úÖ –£ –≤–∞—Å —É–∂–µ –µ—Å—Ç—å –∞–∫—Ç–∏–≤–Ω–∞—è –ø–æ–¥–ø–∏—Å–∫–∞!</b>\n\n"
                    + sub_duration_text,
                )
                return

            # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–¥–ø–∏—Å–∫–µ –∏ –∫–æ–Ω—Ç–∞–∫—Ç—ã –¥–ª—è –æ–ø–ª–∞—Ç—ã
            subscription_text = """
üí≥ <b>–û—Ñ–æ—Ä–º–ª–µ–Ω–∏–µ –ø–æ–¥–ø–∏—Å–∫–∏</b>

üí∞ <b>–°—Ç–æ–∏–º–æ—Å—Ç—å:</b> 500 ‚ÇΩ
‚è∞ <b>–°—Ä–æ–∫ –¥–µ–π—Å—Ç–≤–∏—è:</b> 30 –¥–Ω–µ–π

‚ú® <b>–ß—Ç–æ –¥–∞–µ—Ç –ø–æ–¥–ø–∏—Å–∫–∞:</b>
‚Ä¢ –î–æ 10 –ø–∞—Ü–∏–µ–Ω—Ç–æ–≤ –¥–ª—è –∑–∞–ø–∏—Å–∏
‚Ä¢ –î–æ 10 –∞–∫—Ç–∏–≤–Ω—ã—Ö —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–π
‚Ä¢ –ë–µ–∑–ª–∏–º–∏—Ç–Ω–æ–µ –∏—Å–ø–æ–ª–Ω–µ–Ω–∏–µ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–π
‚Ä¢ –ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç–Ω–∞—è –∏—Å–ø–æ–ª–Ω–µ–Ω–∏–µ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–π
‚Ä¢ –ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç–Ω–∞—è –ø–æ–¥–¥–µ—Ä–∂–∫–∞

üìû <b>–î–ª—è –æ–ø–ª–∞—Ç—ã —Å–≤—è–∂–∏—Ç–µ—Å—å —Å–æ –º–Ω–æ–π:</b>
‚Ä¢ Telegram: <a href="https://t.me/vispar_work">@vispar_work</a>

‚è±Ô∏è <b>–í—Ä–µ–º—è –æ–±—Ä–∞–±–æ—Ç–∫–∏:</b> –¥–æ 24 —á–∞—Å–æ–≤
"""

            await message.answer(
                subscription_text,
                parse_mode="HTML",
                reply_markup=get_start_keyboard(),
            )

    except Exception as e:
        logger.error(f"Error showing subscription info for user {user_id}: {e}")
        await message.answer(
            "<b>‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.</b>",
            reply_markup=get_start_keyboard(),
        )


@router.message(Command("my_subscription"))
async def my_subscription_handler(message: Message, state: FSMContext) -> None:
    """Handler for command /my_subscription to view subscription information."""
    await state.clear()

    if not message.from_user:
        await message.answer(
            "<b>‚ùå –¢–µ—Ö–Ω–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å–æ–æ–±—â–µ–Ω–∏—è</b>",
        )
        return

    user_id = message.from_user.id

    try:
        async with get_or_create_session() as session:
            service = UsersService(session)
            user = await service.get_user_by_id(user_id)

            if not user:
                await message.answer(
                    "<b>‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω. "
                    "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /start –¥–ª—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏.</b>",
                )
                return

            if user.is_subscribed:
                if user.subscription_end is None:
                    # –ë–µ–∑–ª–∏–º–∏—Ç–Ω–∞—è –ø–æ–¥–ø–∏—Å–∫–∞
                    await message.answer(
                        "<b>‚úÖ –£ –≤–∞—Å –µ—Å—Ç—å –∞–∫—Ç–∏–≤–Ω–∞—è –ø–æ–¥–ø–∏—Å–∫–∞</b>\n\n"
                        "–¢–∏–ø –ø–æ–¥–ø–∏—Å–∫–∏: –ë–µ–∑–ª–∏–º–∏—Ç–Ω–∞—è",
                        reply_markup=get_start_keyboard(),
                    )
                elif datetime.now() > user.subscription_end:
                    # –ü–æ–¥–ø–∏—Å–∫–∞ –∏—Å—Ç–µ–∫–ª–∞
                    user.is_subscribed = False
                    await session.commit()
                    await message.answer(
                        "<b>‚ùå –í–∞—à–∞ –ø–æ–¥–ø–∏—Å–∫–∞ –∏—Å—Ç–µ–∫–ª–∞</b>\n\n"
                        "–î–ª—è –ø—Ä–æ–¥–ª–µ–Ω–∏—è –ø–æ–¥–ø–∏—Å–∫–∏ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É /subscribe",
                        reply_markup=get_start_keyboard(),
                    )
                else:
                    # –ê–∫—Ç–∏–≤–Ω–∞—è –ø–æ–¥–ø–∏—Å–∫–∞ —Å –¥–∞—Ç–æ–π –æ–∫–æ–Ω—á–∞–Ω–∏—è
                    remaining_days = (user.subscription_end - datetime.now()).days
                    await message.answer(
                        (
                            "<b>‚úÖ –£ –≤–∞—Å –µ—Å—Ç—å –∞–∫—Ç–∏–≤–Ω–∞—è –ø–æ–¥–ø–∏—Å–∫–∞</b>\n\n"
                            f"–ü–æ–¥–ø–∏—Å–∫–∞ –¥–µ–π—Å—Ç–≤—É–µ—Ç –¥–æ: "
                            f"{user.subscription_end.strftime('%d.%m.%Y %H:%M')}\n"
                            f"<b>–û—Å—Ç–∞–ª–æ—Å—å –¥–Ω–µ–π: {remaining_days}</b>"
                        ),
                        reply_markup=get_start_keyboard(),
                    )
            else:
                await message.answer(
                    "<b>‚ùå –£ –≤–∞—Å –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω–æ–π –ø–æ–¥–ø–∏—Å–∫–∏</b>\n\n"
                    "–î–ª—è –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏—è –ø–æ–¥–ø–∏—Å–∫–∏ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É /subscribe",
                    reply_markup=get_start_keyboard(),
                )

    except Exception as e:
        logger.error(
            f"Error getting subscription information for user {user_id}: {e}",
        )
        await message.answer(
            "<b>‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –ø–æ–¥–ø–∏—Å–∫–µ.</b>",
            reply_markup=get_start_keyboard(),
        )
