import contextlib
from datetime import datetime
from typing import TYPE_CHECKING

from aiogram import F, Router
from aiogram.filters import Command
from aiogram.fsm.context import FSMContext
from aiogram.types import (
    CallbackQuery,
    InaccessibleMessage,
    Message,
)
from loguru import logger

from bot.api.client import GorzdravAPIClient, GorzdravAPIError
from bot.api.utils import format_phone, validate_phone
from bot.db.context import get_or_create_session
from bot.db.services import PatientsService, UsersService
from bot.settings.settings import settings
from bot.utils.callbacks import (
    PatientsMenuFactory,
)
from bot.utils.keyboards import (
    get_add_patient_keyboard,
    get_patient_delete_keyboard,
    get_patient_deleted_keyboard,
    get_patient_view_keyboard,
    get_patients_cancel_back_keyboard,
    get_patients_cancel_back_skip_keyboard,
    get_patients_cancel_keyboard,
    get_patients_keyboard,
)
from bot.utils.states import PatientFormStates

if TYPE_CHECKING:
    from bot.api.models import Attachment
    from bot.db.models.users import User

router = Router(name="patients")


def get_tariff_info(user: "User") -> str:
    """Return information about the user's tariff."""
    if hasattr(user, "is_subscribed") and user.is_subscribed:
        patients_count = len(getattr(user, "patients", []))
        # –°–∫–ª–æ–Ω–µ–Ω–∏–µ –¥–ª—è —Å–ª–æ–≤–∞ "–ø–∞—Ü–∏–µ–Ω—Ç"
        if patients_count % 10 == 1 and patients_count % 100 != 11:
            patients_word = "–ø–∞—Ü–∏–µ–Ω—Ç"
        elif patients_count % 10 in [2, 3, 4] and patients_count % 100 not in [
            12,
            13,
            14,
        ]:
            patients_word = "–ø–∞—Ü–∏–µ–Ω—Ç–∞"
        else:
            patients_word = "–ø–∞—Ü–∏–µ–Ω—Ç–æ–≤"

        return (
            f"<b>üí≥ –ü–ª–∞—Ç–Ω—ã–π —Ç–∞—Ä–∏—Ñ:</b> "
            f"{patients_count}/{settings.MAX_SUBSCRIBED_PATIENTS} {patients_word}"
        )

    patients_count = len(getattr(user, "patients", []))
    # –°–∫–ª–æ–Ω–µ–Ω–∏–µ –¥–ª—è —Å–ª–æ–≤–∞ "–ø–∞—Ü–∏–µ–Ω—Ç"
    if patients_count % 10 == 1 and patients_count % 100 != 11:
        patients_word = "–ø–∞—Ü–∏–µ–Ω—Ç"
    elif patients_count % 10 in [2, 3, 4] and patients_count % 100 not in [12, 13, 14]:
        patients_word = "–ø–∞—Ü–∏–µ–Ω—Ç–∞"
    else:
        patients_word = "–ø–∞—Ü–∏–µ–Ω—Ç–æ–≤"

    return (
        f"<b>üÜì –ë–µ—Å–ø–ª–∞—Ç–Ω—ã–π —Ç–∞—Ä–∏—Ñ:</b> "
        f"{patients_count}/{settings.MAX_UNSUBSCRIBED_PATIENTS} {patients_word}"
    )


async def get_filled_data_text(state: FSMContext) -> str:
    """Return text with filled data."""
    text = "üìã <b>–ó–∞–ø–æ–ª–Ω–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ:</b>\n"

    data = await state.get_data()
    if data.get("last_name"):
        text += f"üë§ –§–∞–º–∏–ª–∏—è: {data['last_name']}\n"
    if data.get("first_name"):
        text += f"üë§ –ò–º—è: {data['first_name']}\n"
    if data.get("middle_name"):
        text += f"üë§ –û—Ç—á–µ—Å—Ç–≤–æ: {data['middle_name']}\n"
    if data.get("birth_date"):
        birth_date = datetime.fromisoformat(data["birth_date"])
        text += f"üìÖ –î–∞—Ç–∞ —Ä–æ–∂–¥–µ–Ω–∏—è: {birth_date.strftime('%d.%m.%Y')}\n"
    if data.get("phone"):
        text += f"üìû –¢–µ–ª–µ—Ñ–æ–Ω: {data['phone']}\n"
    if data.get("email"):
        text += f"üìß Email: {data['email']}\n"

    text += "\n" + "‚îÄ" * 20 + "\n\n"
    return text


async def send_patients_menu(
    user_id: int,
    message: Message,
    *,
    edit_message: bool = False,
) -> Message:
    """Set the patients menu."""
    async with get_or_create_session() as session:
        users_service = UsersService(session)
        patients_service = PatientsService(session)

        user = await users_service.get_user_by_id(user_id)
        if not user:
            if edit_message:
                await message.edit_text(
                    "‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /start –¥–ª—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏.",
                )
                return message
            return await message.answer(
                "‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /start –¥–ª—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏.",
            )

        patients = await patients_service.get_patients_by_user_id(user_id)
        same_day_info = (
            "üìã <b>–û –Ω–∞—Å—Ç—Ä–æ–π–∫–µ –∑–∞–ø–∏—Å–∏ –≤ —Ç–µ–∫—É—â–∏–π –¥–µ–Ω—å:</b>\n\n"
            "‚Ä¢ ‚úÖ <b>–í–∫–ª—é—á–µ–Ω–∞:</b> –±–æ—Ç –±—É–¥–µ—Ç –∏—Å–∫–∞—Ç—å —Å–≤–æ–±–æ–¥–Ω—ã–µ —Å–ª–æ—Ç—ã –Ω–∞ "
            "<u>—Å–µ–≥–æ–¥–Ω—è –∏ –ø–æ–∑–∂–µ</u>\n"
            "  <i>–ù–∞–ø—Ä–∏–º–µ—Ä, –µ—Å–ª–∏ –æ—Å–≤–æ–±–æ–¥–∏—Ç—Å—è —Ç–∞–ª–æ–Ω—á–∏–∫ —á–µ—Ä–µ–∑ —á–∞—Å, "
            "–±–æ—Ç –∑–∞–ø–∏—à–µ—Ç –≤–∞—Å</i>\n\n"
            "‚Ä¢ üö´ <b>–í—ã–∫–ª—é—á–µ–Ω–∞:</b> –±–æ—Ç –±—É–¥–µ—Ç –∏—Å–∫–∞—Ç—å –∑–∞–ø–∏—Å–∏ —Ç–æ–ª—å–∫–æ –Ω–∞ "
            "<u>–∑–∞–≤—Ç—Ä–∞ –∏ –ø–æ–∑–∂–µ</u>\n\n"
            "üí° <i>–î–ª—è –∏–∑–º–µ–Ω–µ–Ω–∏—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ</i>\n\n"
        )

        if not patients:
            text = (
                f"üë• <b>–í–∞—à–∏ –ø–∞—Ü–∏–µ–Ω—Ç—ã</b>\n\n{get_tariff_info(user)}\n\n"
                f"{same_day_info}"
                '–£ –≤–∞—Å –Ω–µ—Ç –¥–æ–±–∞–≤–ª–µ–Ω–Ω—ã—Ö –ø–∞—Ü–∏–µ–Ω—Ç–æ–≤. –ù–∞–∂–º–∏—Ç–µ "–î–æ–±–∞–≤–∏—Ç—å –ø–∞—Ü–∏–µ–Ω—Ç–∞".'
            )
            keyboard = get_add_patient_keyboard()
        else:
            text = (
                f"üë• <b>–í–∞—à–∏ –ø–∞—Ü–∏–µ–Ω—Ç—ã</b>\n\n{get_tariff_info(user)}\n\n{same_day_info}"
            )
            keyboard = get_patients_keyboard(patients, user)

        if edit_message:
            await message.edit_text(text, reply_markup=keyboard)
            return message
        return await message.answer(text, reply_markup=keyboard)


@router.message(Command("patients"))
@router.message(F.text == "üë• –ü–∞—Ü–∏–µ–Ω—Ç—ã")
async def patients_handler(message: Message) -> None:
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –º–µ–Ω—é –ø–∞—Ü–∏–µ–Ω—Ç–æ–≤."""
    if not message.from_user:
        await message.answer(
            "‚ùå –¢–µ—Ö–Ω–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å–æ–æ–±—â–µ–Ω–∏—è",
        )
        return

    user_id = message.from_user.id

    try:
        await send_patients_menu(user_id, message)
    except Exception as e:
        logger.error(
            f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å–ø–∏—Å–∫–∞ –ø–∞—Ü–∏–µ–Ω—Ç–æ–≤ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}: {e}",
        )
        await message.answer(
            "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å–ø–∏—Å–∫–∞ –ø–∞—Ü–∏–µ–Ω—Ç–æ–≤. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.",
        )


@router.callback_query(PatientsMenuFactory.filter(F.action == "list"))
async def list_patients_callback(callback: CallbackQuery, state: FSMContext) -> None:
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –º–µ–Ω—é –ø–∞—Ü–∏–µ–Ω—Ç–æ–≤."""
    await callback.answer()
    if not callback.message or isinstance(callback.message, InaccessibleMessage):
        return
    await send_patients_menu(callback.from_user.id, callback.message, edit_message=True)


@router.callback_query(PatientsMenuFactory.filter(F.action == "add"))
async def add_patient_callback(
    callback: CallbackQuery,
    state: FSMContext,
) -> None:
    """–ù–∞—á–∏–Ω–∞–µ—Ç –ø—Ä–æ—Ü–µ—Å—Å –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –ø–∞—Ü–∏–µ–Ω—Ç–∞."""
    await callback.answer()

    if (
        not callback.from_user
        or not callback.message
        or isinstance(callback.message, InaccessibleMessage)
    ):
        return

    user_id = callback.from_user.id

    try:
        async with get_or_create_session() as session:
            users_service = UsersService(session)
            patients_service = PatientsService(session)

            # –ü–æ–ª—É—á–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            user = await users_service.get_user_by_id(user_id)
            if not user:
                if callback.message:
                    await callback.message.edit_text(
                        "‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω. "
                        "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /start –¥–ª—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏.",
                    )
                return

            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ª–∏–º–∏—Ç –ø–∞—Ü–∏–µ–Ω—Ç–æ–≤
            patients = await patients_service.get_patients_by_user_id(user_id)
            max_patients = (
                settings.MAX_SUBSCRIBED_PATIENTS
                if user.is_subscribed
                else settings.MAX_UNSUBSCRIBED_PATIENTS
            )

            if len(patients) >= max_patients:
                if user.is_subscribed:
                    await callback.message.edit_text(
                        f"‚ùå <b>–õ–∏–º–∏—Ç –ø–∞—Ü–∏–µ–Ω—Ç–æ–≤ –¥–æ—Å—Ç–∏–≥–Ω—É—Ç</b>\n\n"
                        f"üìä –¢–µ–∫—É—â–∏–π –ª–∏–º–∏—Ç: "
                        f"{settings.MAX_SUBSCRIBED_PATIENTS}/"
                        f"{settings.MAX_SUBSCRIBED_PATIENTS} "
                        "–ø–∞—Ü–∏–µ–Ω—Ç–æ–≤",
                    )
                    return
                await callback.message.edit_text(
                    f"‚ùå <b>–õ–∏–º–∏—Ç –ø–∞—Ü–∏–µ–Ω—Ç–æ–≤ –¥–æ—Å—Ç–∏–≥–Ω—É—Ç</b>\n\n"
                    f"üìä –¢–µ–∫—É—â–∏–π –ª–∏–º–∏—Ç: "
                    f"{settings.MAX_UNSUBSCRIBED_PATIENTS}/"
                    f"{settings.MAX_UNSUBSCRIBED_PATIENTS} "
                    "–ø–∞—Ü–∏–µ–Ω—Ç",
                    "üíé –î–ª—è —É–≤–µ–ª–∏—á–µ–Ω–∏—è –ª–∏–º–∏—Ç–∞ –æ—Ñ–æ—Ä–º–∏—Ç–µ –ø–æ–¥–ø–∏—Å–∫—É: /subscribe",
                )
                return
            # –ù–∞—á–∏–Ω–∞–µ–º —Ñ–æ—Ä–º—É –¥–æ–±–∞–≤–ª–µ–Ω–∏—è
            await state.set_state(PatientFormStates.waiting_for_last_name)
            await state.update_data(message_id=callback.message.message_id)
            await callback.message.edit_text(
                "üìù <b>–í–≤–µ–¥–∏—Ç–µ —Ñ–∞–º–∏–ª–∏—é –ø–∞—Ü–∏–µ–Ω—Ç–∞:</b>\n\n"
                "üí° <i>–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ —Ç–æ–ª—å–∫–æ –±—É–∫–≤—ã —Ä—É—Å—Å–∫–æ–≥–æ –∏–ª–∏ –ª–∞—Ç–∏–Ω—Å–∫–æ–≥–æ –∞–ª—Ñ–∞–≤–∏—Ç–∞</i>",
                reply_markup=get_patients_cancel_keyboard(),
            )

    except Exception as e:
        logger.error(
            f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –Ω–∞—á–∞–ª–µ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –ø–∞—Ü–∏–µ–Ω—Ç–∞ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}: {e}",
        )
        if callback.message:
            await callback.message.edit_text(
                "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ –ø–∞—Ü–∏–µ–Ω—Ç–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.",
            )


@router.callback_query(PatientsMenuFactory.filter(F.action == "cancel"))
async def cancel_patient_callback(callback: CallbackQuery, state: FSMContext) -> None:
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –∫–Ω–æ–ø–∫—É '–û—Ç–º–µ–Ω–∞'."""
    await callback.answer()
    await state.clear()
    if not callback.message or isinstance(callback.message, InaccessibleMessage):
        return
    await send_patients_menu(callback.from_user.id, callback.message, edit_message=True)


@router.callback_query(PatientsMenuFactory.filter(F.action == "back"))
async def back_callback(callback: CallbackQuery, state: FSMContext) -> None:
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –∫–Ω–æ–ø–∫—É '–ù–∞–∑–∞–¥'."""
    await callback.answer()
    if not callback.message or isinstance(callback.message, InaccessibleMessage):
        return

    current_state = await state.get_state()
    if not current_state:
        return

    filled_data = await get_filled_data_text(state)

    match current_state:
        case PatientFormStates.waiting_for_first_name:
            await state.set_state(PatientFormStates.waiting_for_last_name)

            await callback.message.edit_text(
                filled_data + "üìù <b>–í–≤–µ–¥–∏—Ç–µ —Ñ–∞–º–∏–ª–∏—é –ø–∞—Ü–∏–µ–Ω—Ç–∞:</b>\n\n"
                "üí° <i>–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ —Ç–æ–ª—å–∫–æ –±—É–∫–≤—ã —Ä—É—Å—Å–∫–æ–≥–æ –∏–ª–∏ "
                "–ª–∞—Ç–∏–Ω—Å–∫–æ–≥–æ –∞–ª—Ñ–∞–≤–∏—Ç–∞</i>",
                reply_markup=get_patients_cancel_keyboard(),
            )
        case PatientFormStates.waiting_for_middle_name:
            await state.set_state(PatientFormStates.waiting_for_first_name)

            await callback.message.edit_text(
                filled_data + "üìù <b>–í–≤–µ–¥–∏—Ç–µ –∏–º—è –ø–∞—Ü–∏–µ–Ω—Ç–∞:</b>\n\n"
                "üí° <i>–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ —Ç–æ–ª—å–∫–æ –±—É–∫–≤—ã —Ä—É—Å—Å–∫–æ–≥–æ –∏–ª–∏ "
                "–ª–∞—Ç–∏–Ω—Å–∫–æ–≥–æ –∞–ª—Ñ–∞–≤–∏—Ç–∞</i>",
                reply_markup=get_patients_cancel_back_keyboard(),
            )
        case PatientFormStates.waiting_for_birth_date:
            await state.set_state(PatientFormStates.waiting_for_middle_name)

            await callback.message.edit_text(
                (
                    filled_data + "üìù <b>–í–≤–µ–¥–∏—Ç–µ –æ—Ç—á–µ—Å—Ç–≤–æ –ø–∞—Ü–∏–µ–Ω—Ç–∞:</b>\n\n"
                    'üí° <i>–í–≤–µ–¥–∏—Ç–µ –æ—Ç—á–µ—Å—Ç–≤–æ –∏–ª–∏ –Ω–∞–∂–º–∏—Ç–µ "–ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å", '
                    "–µ—Å–ª–∏ –æ—Ç—á–µ—Å—Ç–≤–∞ –Ω–µ—Ç</i>"
                ),
                reply_markup=get_patients_cancel_back_skip_keyboard(),
            )
        case PatientFormStates.waiting_for_phone:
            await state.set_state(PatientFormStates.waiting_for_birth_date)

            await callback.message.edit_text(
                filled_data + "üìÖ <b>–í–≤–µ–¥–∏—Ç–µ –¥–∞—Ç—É —Ä–æ–∂–¥–µ–Ω–∏—è –ø–∞—Ü–∏–µ–Ω—Ç–∞:</b>\n\n"
                "üìù <i>–§–æ—Ä–º–∞—Ç: –î–î.–ú–ú.–ì–ì–ì–ì (–Ω–∞–ø—Ä–∏–º–µ—Ä, 15.06.1990)</i>",
                reply_markup=get_patients_cancel_back_keyboard(),
            )
        case PatientFormStates.waiting_for_email:
            await state.set_state(PatientFormStates.waiting_for_phone)

            await callback.message.edit_text(
                filled_data + "üìù <b>–í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ –ø–∞—Ü–∏–µ–Ω—Ç–∞:</b>\n\n"
                "üí° <i>–§–æ—Ä–º–∞—Ç: +7XXXXXXXXXX (–Ω–∞–ø—Ä–∏–º–µ—Ä, +79161234567)</i>",
                reply_markup=get_patients_cancel_back_skip_keyboard(),
            )
        case PatientFormStates.waiting_for_oms:
            await state.set_state(PatientFormStates.waiting_for_email)

            await callback.message.edit_text(
                text=(
                    filled_data + "üìß <b>–í–≤–µ–¥–∏—Ç–µ email –ø–∞—Ü–∏–µ–Ω—Ç–∞:</b>\n\n"
                    "üí° <i>–ù–∞ —É–∫–∞–∑–∞–Ω–Ω—ã–π email –±—É–¥–µ—Ç –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω —Ç–∞–ª–æ–Ω –∏–∑ "
                    "–ì–æ—Ä–∑–¥—Ä–∞–≤–∞ –ø–æ—Å–ª–µ –∑–∞–ø–∏—Å–∏ –∫ –≤—Ä–∞—á—É</i>\n\n"
                ),
                reply_markup=get_patients_cancel_back_keyboard(),
            )
        case _:
            pass


@router.callback_query(PatientsMenuFactory.filter(F.action == "skip"))
async def skip_callback(callback: CallbackQuery, state: FSMContext) -> None:
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –∫–Ω–æ–ø–∫—É '–ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å'."""
    await callback.answer()
    if not callback.message or isinstance(callback.message, InaccessibleMessage):
        return

    current_state = await state.get_state()
    filled_data = await get_filled_data_text(state)

    if current_state == PatientFormStates.waiting_for_middle_name:
        await state.update_data(middle_name="")
        await state.set_state(PatientFormStates.waiting_for_birth_date)

        await callback.message.edit_text(
            filled_data + "üìÖ <b>–í–≤–µ–¥–∏—Ç–µ –¥–∞—Ç—É —Ä–æ–∂–¥–µ–Ω–∏—è –ø–∞—Ü–∏–µ–Ω—Ç–∞:</b>\n\n"
            "üìù <i>–§–æ—Ä–º–∞—Ç: –î–î.–ú–ú.–ì–ì–ì–ì (–Ω–∞–ø—Ä–∏–º–µ—Ä, 15.06.1990)</i>",
            reply_markup=get_patients_cancel_back_keyboard(),
        )
    elif current_state == PatientFormStates.waiting_for_phone:
        await state.update_data(phone="")
        await state.set_state(PatientFormStates.waiting_for_email)

        await callback.message.edit_text(
            (
                filled_data + "üìß <b>–í–≤–µ–¥–∏—Ç–µ email –ø–∞—Ü–∏–µ–Ω—Ç–∞:</b>\n\n"
                "üí° <i>–ù–∞ —É–∫–∞–∑–∞–Ω–Ω—ã–π email –±—É–¥–µ—Ç –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω —Ç–∞–ª–æ–Ω –∏–∑ "
                "–ì–æ—Ä–∑–¥—Ä–∞–≤–∞ –ø–æ—Å–ª–µ –∑–∞–ø–∏—Å–∏ –∫ –≤—Ä–∞—á—É</i>\n\n"
            ),
            reply_markup=get_patients_cancel_back_keyboard(),
        )


@router.message(PatientFormStates.waiting_for_last_name)
async def last_name_handler(message: Message, state: FSMContext) -> None:
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –≤–≤–æ–¥ —Ñ–∞–º–∏–ª–∏–∏."""
    text = (message.text or "").strip()
    data = await state.get_data()
    filled_data = await get_filled_data_text(state)
    message_id = data.get("message_id")

    if not message_id:
        await message.answer(
            "‚ùå <b>–û—à–∏–±–∫–∞:</b> –Ω–µ –Ω–∞–π–¥–µ–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è.",
        )
        return
    if not message.bot:
        return

    with contextlib.suppress(Exception):
        await message.delete()

    if not text or not all(ch.isalpha() or ch in " -" for ch in text) or len(text) < 2:
        with contextlib.suppress(Exception):
            await message.bot.edit_message_text(
                chat_id=message.chat.id,
                message_id=message_id,
                text=(
                    filled_data + "‚ùå <b>–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–∞—è —Ñ–∞–º–∏–ª–∏—è!</b>\n\n"
                    "üìù –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ —Ñ–∞–º–∏–ª–∏—é –∑–∞–Ω–æ–≤–æ:\n\n"
                    "üí° <i>–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ —Ç–æ–ª—å–∫–æ –±—É–∫–≤—ã —Ä—É—Å—Å–∫–æ–≥–æ –∏–ª–∏ "
                    "–ª–∞—Ç–∏–Ω—Å–∫–æ–≥–æ –∞–ª—Ñ–∞–≤–∏—Ç–∞, –º–∏–Ω–∏–º—É–º 2 —Å–∏–º–≤–æ–ª–∞</i>"
                ),
                reply_markup=get_patients_cancel_keyboard(),
            )
        return

    await state.update_data(last_name=text.title())
    filled_data = await get_filled_data_text(state)
    await state.set_state(PatientFormStates.waiting_for_first_name)

    await message.bot.edit_message_text(
        chat_id=message.chat.id,
        message_id=message_id,
        text=(
            filled_data + "üìù <b>–í–≤–µ–¥–∏—Ç–µ –∏–º—è –ø–∞—Ü–∏–µ–Ω—Ç–∞:</b>\n\n"
            "üí° <i>–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ —Ç–æ–ª—å–∫–æ –±—É–∫–≤—ã —Ä—É—Å—Å–∫–æ–≥–æ –∏–ª–∏ "
            "–ª–∞—Ç–∏–Ω—Å–∫–æ–≥–æ –∞–ª—Ñ–∞–≤–∏—Ç–∞</i>"
        ),
        reply_markup=get_patients_cancel_back_keyboard(),
    )


@router.message(PatientFormStates.waiting_for_first_name)
async def first_name_handler(message: Message, state: FSMContext) -> None:
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –≤–≤–æ–¥ –∏–º–µ–Ω–∏."""
    text = (message.text or "").strip()
    data = await state.get_data()
    filled_data = await get_filled_data_text(state)
    message_id = data.get("message_id")

    if not message_id:
        await message.answer(
            "‚ùå <b>–û—à–∏–±–∫–∞:</b> –Ω–µ –Ω–∞–π–¥–µ–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è.",
        )
        return
    if not message.bot:
        return

    with contextlib.suppress(Exception):
        await message.delete()

    if not text or not all(ch.isalpha() or ch in " -" for ch in text) or len(text) < 2:
        with contextlib.suppress(Exception):
            await message.bot.edit_message_text(
                chat_id=message.chat.id,
                message_id=message_id,
                text=(
                    filled_data + "‚ùå <b>–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ –∏–º—è!</b>\n\n"
                    "üìù –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∏–º—è –∑–∞–Ω–æ–≤–æ:\n\n"
                    "üí° <i>–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ —Ç–æ–ª—å–∫–æ –±—É–∫–≤—ã —Ä—É—Å—Å–∫–æ–≥–æ –∏–ª–∏ "
                    "–ª–∞—Ç–∏–Ω—Å–∫–æ–≥–æ –∞–ª—Ñ–∞–≤–∏—Ç–∞, –º–∏–Ω–∏–º—É–º 2 —Å–∏–º–≤–æ–ª–∞</i>"
                ),
                reply_markup=get_patients_cancel_back_keyboard(),
            )
        return

    await state.update_data(first_name=text.title())
    filled_data = await get_filled_data_text(state)
    await state.set_state(PatientFormStates.waiting_for_middle_name)

    await message.bot.edit_message_text(
        chat_id=message.chat.id,
        message_id=message_id,
        text=(
            filled_data + "üìù <b>–í–≤–µ–¥–∏—Ç–µ –æ—Ç—á–µ—Å—Ç–≤–æ –ø–∞—Ü–∏–µ–Ω—Ç–∞:</b>\n\n"
            'üí° <i>–í–≤–µ–¥–∏—Ç–µ –æ—Ç—á–µ—Å—Ç–≤–æ –∏–ª–∏ –Ω–∞–∂–º–∏—Ç–µ "–ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å", –µ—Å–ª–∏ –æ—Ç—á–µ—Å—Ç–≤–∞ –Ω–µ—Ç</i>'
        ),
        reply_markup=get_patients_cancel_back_skip_keyboard(),
    )


@router.message(PatientFormStates.waiting_for_middle_name)
async def middle_name_handler(message: Message, state: FSMContext) -> None:
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –≤–≤–æ–¥ –æ—Ç—á–µ—Å—Ç–≤–∞."""
    text = (message.text or "").strip()
    data = await state.get_data()
    filled_data = await get_filled_data_text(state)
    message_id = data.get("message_id")

    if not message_id:
        await message.answer(
            "‚ùå <b>–û—à–∏–±–∫–∞:</b> –Ω–µ –Ω–∞–π–¥–µ–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è.",
        )
        return
    if not message.bot:
        return
    with contextlib.suppress(Exception):
        await message.delete()

    if text and (not all(ch.isalpha() or ch in " -" for ch in text) or len(text) < 2):
        with contextlib.suppress(Exception):
            await message.bot.edit_message_text(
                chat_id=message.chat.id,
                message_id=message_id,
                text=(
                    filled_data + "‚ùå <b>–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ –æ—Ç—á–µ—Å—Ç–≤–æ!</b>\n\n"
                    "üìù –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –æ—Ç—á–µ—Å—Ç–≤–æ –∑–∞–Ω–æ–≤–æ –∏–ª–∏ –Ω–∞–∂–º–∏—Ç–µ '–ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å', "
                    "–µ—Å–ª–∏ –æ—Ç—á–µ—Å—Ç–≤–∞ –Ω–µ—Ç: \n\n"
                    "üí° <i>–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ —Ç–æ–ª—å–∫–æ –±—É–∫–≤—ã —Ä—É—Å—Å–∫–æ–≥–æ –∏–ª–∏ "
                    "–ª–∞—Ç–∏–Ω—Å–∫–æ–≥–æ –∞–ª—Ñ–∞–≤–∏—Ç–∞, –º–∏–Ω–∏–º—É–º 2 —Å–∏–º–≤–æ–ª–∞</i>"
                ),
                reply_markup=get_patients_cancel_back_skip_keyboard(),
            )
        return

    await state.update_data(middle_name=(text.title()))
    filled_data = await get_filled_data_text(state)
    await state.set_state(PatientFormStates.waiting_for_birth_date)

    await message.bot.edit_message_text(
        chat_id=message.chat.id,
        message_id=message_id,
        text=(
            filled_data + "üìù <b>–í–≤–µ–¥–∏—Ç–µ –¥–∞—Ç—É —Ä–æ–∂–¥–µ–Ω–∏—è –ø–∞—Ü–∏–µ–Ω—Ç–∞:</b>\n\n"
            "üí° <i>–§–æ—Ä–º–∞—Ç: –î–î.–ú–ú.–ì–ì–ì–ì (–Ω–∞–ø—Ä–∏–º–µ—Ä, 15.03.1990)</i>"
        ),
        reply_markup=get_patients_cancel_back_keyboard(),
    )


@router.message(PatientFormStates.waiting_for_birth_date)
async def birth_date_handler(message: Message, state: FSMContext) -> None:
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –≤–≤–æ–¥ –¥–∞—Ç—ã —Ä–æ–∂–¥–µ–Ω–∏—è."""
    text = (message.text or "").strip()
    data = await state.get_data()
    filled_data = await get_filled_data_text(state)
    message_id = data.get("message_id")

    if not message_id:
        await message.answer(
            "‚ùå <b>–û—à–∏–±–∫–∞:</b> –Ω–µ –Ω–∞–π–¥–µ–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è.",
        )
        return
    if not message.bot:
        return
    # –£–¥–∞–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    with contextlib.suppress(Exception):
        await message.delete()

    # –ü–∞—Ä—Å–∏–º –¥–∞—Ç—É –≤ —Ñ–æ—Ä–º–∞—Ç–µ –î–î.–ú–ú.–ì–ì–ì–ì
    try:
        date_parts = text.split(".")
        if len(date_parts) != 3:
            raise ValueError("–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞—Ç—ã")

        day, month, year = map(int, date_parts)
        birth_dt = datetime(year, month, day)

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –¥–∞—Ç–∞ –Ω–µ –≤ –±—É–¥—É—â–µ–º
        if birth_dt > datetime.now():
            raise ValueError("–î–∞—Ç–∞ —Ä–æ–∂–¥–µ–Ω–∏—è –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –≤ –±—É–¥—É—â–µ–º")

    except (ValueError, TypeError):
        with contextlib.suppress(Exception):
            await message.bot.edit_message_text(
                chat_id=message.chat.id,
                message_id=message_id,
                text=(
                    filled_data + "‚ùå <b>–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞—Ç—ã!</b>\n\n"
                    "üìù <b>–í–≤–µ–¥–∏—Ç–µ –¥–∞—Ç—É —Ä–æ–∂–¥–µ–Ω–∏—è –ø–∞—Ü–∏–µ–Ω—Ç–∞:</b>\n\n"
                    "üí° <i>–§–æ—Ä–º–∞—Ç: –î–î.–ú–ú.–ì–ì–ì–ì (–Ω–∞–ø—Ä–∏–º–µ—Ä, 15.03.1990)</i>"
                ),
                reply_markup=get_patients_cancel_back_keyboard(),
            )
        return

    await state.update_data(birth_date=birth_dt.isoformat())
    filled_data = await get_filled_data_text(state)
    await state.set_state(PatientFormStates.waiting_for_phone)

    await message.bot.edit_message_text(
        chat_id=message.chat.id,
        message_id=message_id,
        text=(
            filled_data + "üìù <b>–í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ –ø–∞—Ü–∏–µ–Ω—Ç–∞:</b>\n\n"
            "üí° <i>–§–æ—Ä–º–∞—Ç: +7XXXXXXXXXX (–Ω–∞–ø—Ä–∏–º–µ—Ä, +79161234567)</i>"
        ),
        reply_markup=get_patients_cancel_back_skip_keyboard(),
    )


@router.message(PatientFormStates.waiting_for_phone)
async def phone_handler(message: Message, state: FSMContext) -> None:
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –≤–≤–æ–¥ –Ω–æ–º–µ—Ä–∞ —Ç–µ–ª–µ—Ñ–æ–Ω–∞."""
    text = (message.text or "").strip()
    data = await state.get_data()
    filled_data = await get_filled_data_text(state)
    message_id = data.get("message_id")

    if not message_id:
        await message.answer(
            "‚ùå <b>–û—à–∏–±–∫–∞:</b> –Ω–µ –Ω–∞–π–¥–µ–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è.",
        )
        return
    if not message.bot:
        return
    # –£–¥–∞–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    with contextlib.suppress(Exception):
        await message.delete()

    if not validate_phone(text):
        with contextlib.suppress(Exception):
            await message.bot.edit_message_text(
                chat_id=message.chat.id,
                message_id=message_id,
                text=(
                    filled_data + "‚ùå <b>–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –Ω–æ–º–µ—Ä–∞ —Ç–µ–ª–µ—Ñ–æ–Ω–∞!</b>\n\n"
                    "üìù <b>–í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ –ø–∞—Ü–∏–µ–Ω—Ç–∞:</b>\n\n"
                    "üí° <i>–§–æ—Ä–º–∞—Ç: +7XXXXXXXXXX (–Ω–∞–ø—Ä–∏–º–µ—Ä, +79161234567)</i>"
                ),
                reply_markup=get_patients_cancel_back_skip_keyboard(),
            )
        return

    phone_fmt = format_phone(text)
    await state.update_data(phone=phone_fmt)
    filled_data = await get_filled_data_text(state)
    await state.set_state(PatientFormStates.waiting_for_email)

    await message.bot.edit_message_text(
        chat_id=message.chat.id,
        message_id=message_id,
        text=(
            filled_data + "üìß <b>–í–≤–µ–¥–∏—Ç–µ email –ø–∞—Ü–∏–µ–Ω—Ç–∞:</b>\n\n"
            "üí° <i>–ù–∞ —É–∫–∞–∑–∞–Ω–Ω—ã–π email –±—É–¥–µ—Ç –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω —Ç–∞–ª–æ–Ω –∏–∑ "
            "–ì–æ—Ä–∑–¥—Ä–∞–≤–∞ –ø–æ—Å–ª–µ –∑–∞–ø–∏—Å–∏ –∫ –≤—Ä–∞—á—É</i>\n\n"
        ),
        reply_markup=get_patients_cancel_back_keyboard(),
    )


@router.message(PatientFormStates.waiting_for_email)
async def email_handler(message: Message, state: FSMContext) -> None:
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –≤–≤–æ–¥ email."""
    text = (message.text or "").strip()
    data = await state.get_data()
    filled_data = await get_filled_data_text(state)
    message_id = data.get("message_id")

    if not message_id:
        await message.answer(
            "‚ùå <b>–û—à–∏–±–∫–∞:</b> –Ω–µ –Ω–∞–π–¥–µ–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è.",
        )
        return
    if not message.bot:
        return
    # –£–¥–∞–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    with contextlib.suppress(Exception):
        await message.delete()

    # –í–∞–ª–∏–¥–∞—Ü–∏—è –∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ email
    if text.lower() == "–Ω–µ—Ç":
        await state.update_data(email=None)
    else:
        # –ü—Ä–æ—Å—Ç–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ email
        if "@" not in text or "." not in text.split("@")[1]:
            with contextlib.suppress(Exception):
                await message.bot.edit_message_text(
                    chat_id=message.chat.id,
                    message_id=message_id,
                    text=(
                        filled_data + "‚ùå <b>–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π email!</b>\n\n"
                        "üìß <b>–í–≤–µ–¥–∏—Ç–µ email –ø–∞—Ü–∏–µ–Ω—Ç–∞:</b>\n\n"
                        "üí° <i>–ù–∞ —É–∫–∞–∑–∞–Ω–Ω—ã–π email –±—É–¥–µ—Ç –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω —Ç–∞–ª–æ–Ω –∏–∑ "
                        "–ì–æ—Ä–∑–¥—Ä–∞–≤–∞ –ø–æ—Å–ª–µ –∑–∞–ø–∏—Å–∏ –∫ –≤—Ä–∞—á—É</i>\n\n"
                    ),
                    reply_markup=get_patients_cancel_back_keyboard(),
                )

            return
        await state.update_data(email=text)

    filled_data = await get_filled_data_text(state)
    await state.set_state(PatientFormStates.waiting_for_oms)

    await message.bot.edit_message_text(
        chat_id=message.chat.id,
        message_id=message_id,
        text=(
            filled_data + "üÜî <b>–í–≤–µ–¥–∏—Ç–µ –¥–∞–Ω–Ω—ã–µ –ø–æ–ª–∏—Å–∞ –û–ú–°:</b>\n\n"
            "üìã <b>–î–ª—è –ø–æ–ª–∏—Å–æ–≤ —Å—Ç–∞—Ä–æ–≥–æ –æ–±—Ä–∞–∑—Ü–∞:</b>\n"
            "üí° <i>–§–æ—Ä–º–∞—Ç: –°–µ—Ä–∏—è –ù–æ–º–µ—Ä (–Ω–∞–ø—Ä–∏–º–µ—Ä: 1234567890 1234567890)</i>\n\n"
            "üìã <b>–î–ª—è –ø–æ–ª–∏—Å–æ–≤ –Ω–æ–≤–æ–≥–æ –æ–±—Ä–∞–∑—Ü–∞ (16 —Ü–∏—Ñ—Ä):</b>\n"
            "üí° <i>–§–æ—Ä–º–∞—Ç: 1234567890123456</i>\n\n"
            "‚ÑπÔ∏è <i>–°–µ—Ä–∏—é –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ —É–∫–∞–∑—ã–≤–∞—Ç—å —Ç–æ–ª—å–∫–æ –¥–ª—è –ø–æ–ª–∏—Å–æ–≤ —Å—Ç–∞—Ä–æ–≥–æ –æ–±—Ä–∞–∑—Ü–∞</i>"
        ),
        reply_markup=get_patients_cancel_back_keyboard(),
    )


@router.message(PatientFormStates.waiting_for_oms)
async def oms_handler(  # noqa: C901, PLR0911, PLR0912, PLR0915
    message: Message,
    state: FSMContext,
) -> None:
    """Handles input of OMS data."""
    text = (message.text or "").strip()
    data = await state.get_data()
    filled_data = await get_filled_data_text(state)
    message_id = data.get("message_id")

    if not message_id:
        await message.answer(
            "‚ùå <b>–û—à–∏–±–∫–∞:</b> –Ω–µ –Ω–∞–π–¥–µ–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è.",
        )
        return
    if not message.bot:
        return
    if not message.from_user:
        return
    # Remove user message
    with contextlib.suppress(Exception):
        await message.delete()

    # Validate OMS data
    if not text or len(text.replace(" ", "")) < 10:
        with contextlib.suppress(Exception):
            await message.bot.edit_message_text(
                chat_id=message.chat.id,
                message_id=message_id,
                text=(
                    filled_data + "‚ùå <b>–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –ø–æ–ª–∏—Å–∞ –û–ú–°!</b>\n\n"
                    "üÜî <b>–í–≤–µ–¥–∏—Ç–µ –¥–∞–Ω–Ω—ã–µ –ø–æ–ª–∏—Å–∞ –û–ú–°:</b>\n\n"
                    "üìã <b>–î–ª—è –ø–æ–ª–∏—Å–æ–≤ —Å—Ç–∞—Ä–æ–≥–æ –æ–±—Ä–∞–∑—Ü–∞:</b>\n"
                    "üí° <i>–§–æ—Ä–º–∞—Ç: –°–µ—Ä–∏—è –ù–æ–º–µ—Ä "
                    "(–Ω–∞–ø—Ä–∏–º–µ—Ä: 1234567890 1234567890)</i>\n\n"
                    "üìã <b>–î–ª—è –ø–æ–ª–∏—Å–æ–≤ –Ω–æ–≤–æ–≥–æ –æ–±—Ä–∞–∑—Ü–∞ (16 —Ü–∏—Ñ—Ä):</b>\n"
                    "üí° <i>–§–æ—Ä–º–∞—Ç: 1234567890123456</i>\n\n"
                    "‚ÑπÔ∏è <i>–°–µ—Ä–∏—é –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ —É–∫–∞–∑—ã–≤–∞—Ç—å —Ç–æ–ª—å–∫–æ –¥–ª—è "
                    "–ø–æ–ª–∏—Å–æ–≤ —Å—Ç–∞—Ä–æ–≥–æ –æ–±—Ä–∞–∑—Ü–∞</i>"
                ),
                reply_markup=get_patients_cancel_back_keyboard(),
            )
        return

    # Parse OMS data
    parts = text.split()
    if len(parts) == 2:
        # Old sample policy: series and number
        polis_s, polis_n = parts
        await state.update_data(polis_s=polis_s, polis_n=polis_n)
    elif len(parts) == 1 and len(text.replace(" ", "")) == 16:
        # New sample policy: only number
        await state.update_data(polis_s="", polis_n=text.replace(" ", ""))
    else:
        with contextlib.suppress(Exception):
            await message.bot.edit_message_text(
                chat_id=message.chat.id,
                message_id=message_id,
                text=(
                    filled_data + "‚ùå <b>–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –ø–æ–ª–∏—Å–∞ –û–ú–°!</b>\n\n"
                    "üÜî <b>–í–≤–µ–¥–∏—Ç–µ –¥–∞–Ω–Ω—ã–µ –ø–æ–ª–∏—Å–∞ –û–ú–°:</b>\n\n"
                    "üìã <b>–î–ª—è –ø–æ–ª–∏—Å–æ–≤ —Å—Ç–∞—Ä–æ–≥–æ –æ–±—Ä–∞–∑—Ü–∞:</b>\n"
                    "üí° <i>–§–æ—Ä–º–∞—Ç: –°–µ—Ä–∏—è –ù–æ–º–µ—Ä "
                    "(–Ω–∞–ø—Ä–∏–º–µ—Ä: 1234567890 1234567890)</i>\n\n"
                    "üìã <b>–î–ª—è –ø–æ–ª–∏—Å–æ–≤ –Ω–æ–≤–æ–≥–æ –æ–±—Ä–∞–∑—Ü–∞ (16 —Ü–∏—Ñ—Ä):</b>\n"
                    "üí° <i>–§–æ—Ä–º–∞—Ç: 1234567890123456</i>\n\n"
                    "‚ÑπÔ∏è <i>–°–µ—Ä–∏—é –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ —É–∫–∞–∑—ã–≤–∞—Ç—å —Ç–æ–ª—å–∫–æ –¥–ª—è "
                    "–ø–æ–ª–∏—Å–æ–≤ —Å—Ç–∞—Ä–æ–≥–æ –æ–±—Ä–∞–∑—Ü–∞</i>"
                ),
                reply_markup=get_patients_cancel_back_keyboard(),
            )
        return

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ª–∏–º–∏—Ç –ø–∞—Ü–∏–µ–Ω—Ç–æ–≤ –ø–µ—Ä–µ–¥ —Å–æ–∑–¥–∞–Ω–∏–µ–º
    try:
        async with get_or_create_session() as session:
            users_service = UsersService(session)
            patients_service = PatientsService(session)

            user = await users_service.get_user_by_id(message.from_user.id)
            if not user:
                await message.bot.edit_message_text(
                    chat_id=message.chat.id,
                    message_id=message_id,
                    text=(
                        "‚ùå <b>–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω.</b>\n\n"
                        "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /start –¥–ª—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏."
                    ),
                )
                await state.clear()
                return

            patients = await patients_service.get_patients_by_user_id(
                message.from_user.id,
            )
            max_patients = (
                settings.MAX_SUBSCRIBED_PATIENTS
                if user.is_subscribed
                else settings.MAX_UNSUBSCRIBED_PATIENTS
            )

            if len(patients) >= max_patients:
                if user.is_subscribed:
                    await message.bot.edit_message_text(
                        chat_id=message.chat.id,
                        message_id=message_id,
                        text=(
                            f"‚ùå <b>–õ–∏–º–∏—Ç –ø–∞—Ü–∏–µ–Ω—Ç–æ–≤ –¥–æ—Å—Ç–∏–≥–Ω—É—Ç</b>\n\n"
                            f"üìä –¢–µ–∫—É—â–∏–π –ª–∏–º–∏—Ç: "
                            f"{settings.MAX_SUBSCRIBED_PATIENTS}/"
                            f"{settings.MAX_SUBSCRIBED_PATIENTS} "
                            "–ø–∞—Ü–∏–µ–Ω—Ç–æ–≤"
                        ),
                    )
                else:
                    await message.bot.edit_message_text(
                        chat_id=message.chat.id,
                        message_id=message_id,
                        text=(
                            f"‚ùå <b>–õ–∏–º–∏—Ç –ø–∞—Ü–∏–µ–Ω—Ç–æ–≤ –¥–æ—Å—Ç–∏–≥–Ω—É—Ç</b>\n\n"
                            f"üìä –¢–µ–∫—É—â–∏–π –ª–∏–º–∏—Ç: "
                            f"{settings.MAX_UNSUBSCRIBED_PATIENTS}/"
                            f"{settings.MAX_UNSUBSCRIBED_PATIENTS} "
                            "–ø–∞—Ü–∏–µ–Ω—Ç\n\n"
                            "üíé –î–ª—è —É–≤–µ–ª–∏—á–µ–Ω–∏—è –ª–∏–º–∏—Ç–∞ –æ—Ñ–æ—Ä–º–∏—Ç–µ –ø–æ–¥–ø–∏—Å–∫—É: /subscribe"
                        ),
                    )
                await state.clear()
                return
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ –ª–∏–º–∏—Ç–∞ –ø–∞—Ü–∏–µ–Ω—Ç–æ–≤: {e}")
        await message.bot.edit_message_text(
            chat_id=message.chat.id,
            message_id=message_id,
            text=(
                "‚ùå <b>–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ –ª–∏–º–∏—Ç–∞ –ø–∞—Ü–∏–µ–Ω—Ç–æ–≤.</b>\n\n"
                "–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –Ω–∞—á–∞—Ç—å –∑–∞–Ω–æ–≤–æ: /patients"
            ),
        )
        await state.clear()
        return

    # –ó–∞–≤–µ—Ä—à–∞–µ–º —Å–æ–∑–¥–∞–Ω–∏–µ –ø–∞—Ü–∏–µ–Ω—Ç–∞
    try:
        patient_data = await state.get_data()
        failed_lpus: "list[tuple[Attachment, str]]" = []
        successful_lpus: "list[Attachment]" = []
        # –í–∞–ª–∏–¥–∞—Ü–∏—è –ø–∞—Ü–∏–µ–Ω—Ç–∞ —á–µ—Ä–µ–∑ API
        try:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ—Å—Ç—å –ø–æ–ª–∏—Å–∞ —á–µ—Ä–µ–∑ –∑–∞–ø—Ä–æ—Å –ø—Ä–∏–∫—Ä–µ–ø–ª–µ–Ω–∏–π
            async with GorzdravAPIClient() as api_client:
                attachments_response = await api_client.get_attachments(
                    polis_s=patient_data.get("polis_s"),
                    polis_n=patient_data.get("polis_n"),
                )

                if not attachments_response.success or not attachments_response.result:
                    await message.bot.edit_message_text(
                        chat_id=message.chat.id,
                        message_id=message_id,
                        text=(
                            "‚ùå <b>–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –ø–æ–ª–∏—Å–∞ –û–ú–°!</b>\n\n"
                            "<i>–ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ø—Ä–∞–≤–∏–ª—å–Ω–æ—Å—Ç—å –≤–≤–µ–¥–µ–Ω–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª–∏—Å–∞ "
                            "–∏ –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.</i>\n\n"
                            "–ù–∞—á–∞—Ç—å –∑–∞–Ω–æ–≤–æ: /patients"
                        ),
                    )
                    await state.clear()
                    return

                # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–∞—Ü–∏–µ–Ω—Ç–∞ –≤–æ –≤—Å–µ—Ö –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –õ–ü–£
                birth_date_iso = patient_data.get("birth_date", "").replace(".", "-")

                for attachment in attachments_response.result:
                    try:
                        patient_search_response = await api_client.search_patient(
                            lpu_id=attachment.id,
                            last_name=patient_data.get("last_name", ""),
                            first_name=patient_data.get("first_name", ""),
                            middle_name=patient_data.get("middle_name", ""),
                            birthdate_iso=birth_date_iso,
                        )

                        if not (
                            patient_search_response.success
                            and patient_search_response.result
                        ):
                            failed_lpus.append(
                                (
                                    attachment,
                                    patient_search_response.message
                                    or "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞",
                                ),
                            )
                        else:
                            successful_lpus.append(attachment)
                    except GorzdravAPIError as e:
                        logger.error(
                            f"Erro while searching for a patient in LPU "
                            f"{attachment.id}: {e}",
                        )
                        failed_lpus.append((attachment, e.message))
                        continue

        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –≤–∞–ª–∏–¥–∞—Ü–∏–∏ –ø–∞—Ü–∏–µ–Ω—Ç–∞: {e}")
            await message.bot.edit_message_text(
                chat_id=message.chat.id,
                message_id=message_id,
                text=(
                    "‚ùå <b>–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ –¥–∞–Ω–Ω—ã—Ö –ø–∞—Ü–∏–µ–Ω—Ç–∞.</b>\n\n"
                    "–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –Ω–∞—á–∞—Ç—å –∑–∞–Ω–æ–≤–æ: /patients"
                ),
            )
            await state.clear()
            return

        async with get_or_create_session() as session:
            patients_service = PatientsService(session)
            await patients_service.create_patient(
                {
                    "user_id": message.from_user.id,
                    "last_name": patient_data.get("last_name"),
                    "first_name": patient_data.get("first_name"),
                    "middle_name": patient_data.get("middle_name"),
                    "birth_date": datetime.fromisoformat(
                        patient_data.get("birth_date") or "",
                    ),
                    "polis_s": patient_data.get("polis_s"),
                    "polis_n": patient_data.get("polis_n"),
                    "phone": patient_data.get("phone"),
                    "email": patient_data.get("email"),
                },
            )

        # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–≥–æ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è
        full_name = (
            f"{patient_data.get('last_name', '')} {patient_data.get('first_name', '')}"
        )
        if patient_data.get("middle_name"):
            full_name += f" {patient_data.get('middle_name')}"

        birth_date = patient_data.get("birth_date", "")
        phone = patient_data.get("phone") or "–Ω–µ —É–∫–∞–∑–∞–Ω"
        email = patient_data.get("email") or "–Ω–µ —É–∫–∞–∑–∞–Ω"

        # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –ø–æ–ª–∏—Å –û–ú–°
        polis_s = patient_data.get("polis_s", "")
        polis_n = patient_data.get("polis_n", "")
        polis_text = (
            f"{polis_s} {polis_n}".strip() if (polis_s or polis_n) else "–Ω–µ —É–∫–∞–∑–∞–Ω"
        )

        # –§–æ—Ä–º–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç –æ –ø—Ä–æ–±–ª–µ–º–Ω—ã—Ö –õ–ü–£
        failed_lpus_text = ""
        if failed_lpus:
            failed_lpus_details: "list[str]" = []
            for lpu, error_msg in failed_lpus:
                lpu_name = lpu.lpu_full_name or lpu.lpu_short_name
                failed_lpus_details.append(
                    f"üè• <b>{lpu_name}</b>\n   ‚ùå {error_msg}",
                )

            failed_lpus_text = (
                "‚ö†Ô∏è <b>–í –Ω–µ–∫–æ—Ç–æ—Ä—ã—Ö –º–µ–¥–∏—Ü–∏–Ω—Å–∫–∏—Ö —É—á—Ä–µ–∂–¥–µ–Ω–∏—è—Ö –Ω–µ "
                "—É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ –≤–∞—à—É –∫–∞—Ä—Ç–æ—á–∫—É:</b>\n\n"
                + "\n\n".join(failed_lpus_details)
                + "\n\n"
                + "‚îÄ" * 20
                + "\n\n"
            )

        # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º —Å–ø–∏—Å–æ–∫ —É—Å–ø–µ—à–Ω—ã—Ö –õ–ü–£
        successful_lpus_text = ""
        if successful_lpus:
            successful_lpus_names = [
                lpu.lpu_full_name or lpu.lpu_short_name for lpu in successful_lpus
            ]
            successful_lpus_text = (
                "\n\nüè• <b>–ü—Ä–∏–∫—Ä–µ–ø–ª–µ–Ω–Ω—ã–µ –º–µ–¥–∏—Ü–∏–Ω—Å–∫–∏–µ —É—á—Ä–µ–∂–¥–µ–Ω–∏—è:</b>\n"
                + "\n".join(
                    [f"‚Ä¢ {name}" for name in successful_lpus_names],
                )
            )

        await message.bot.edit_message_text(
            chat_id=message.chat.id,
            message_id=message_id,
            text=(
                f"{failed_lpus_text}"
                "‚úÖ <b>–ü–∞—Ü–∏–µ–Ω—Ç —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω!</b>\n\n"
                f"üë§ <b>–§–ò–û:</b> {full_name}\n"
                "üìÖ <b>–î–∞—Ç–∞ —Ä–æ–∂–¥–µ–Ω–∏—è:</b> "
                f"{datetime.fromisoformat(birth_date).strftime('%d.%m.%Y')}\n"
                f"üì± <b>–¢–µ–ª–µ—Ñ–æ–Ω:</b> {phone}\n"
                f"üìß <b>Email:</b> {email}\n"
                f"üÜî <b>–ü–æ–ª–∏—Å –û–ú–°:</b> {polis_text}"
                f"{successful_lpus_text}\n\n"
                "üìã –î–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –∑–∞–ø–∏—Å–µ–π: /appointments\n"
                "‚è∞ –î–ª—è —Å–æ–∑–¥–∞–Ω–∏—è —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è –Ω–∞ –∑–∞–ø–∏—Å—å: /schedules\n"
                "üìã –î–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –ø–∞—Ü–∏–µ–Ω—Ç–æ–≤: /patients"
            ),
        )

        await state.clear()

    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –ø–∞—Ü–∏–µ–Ω—Ç–∞: {e}")
        await message.bot.edit_message_text(
            chat_id=message.chat.id,
            message_id=message_id,
            text=(
                "‚ùå <b>–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –ø–∞—Ü–∏–µ–Ω—Ç–∞.</b>\n\n"
                "–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –Ω–∞—á–∞—Ç—å –∑–∞–Ω–æ–≤–æ: /patients"
            ),
        )
        await state.clear()


@router.callback_query(PatientsMenuFactory.filter(F.action == "view"))
async def view_patient_callback(  # noqa: C901
    callback: CallbackQuery,
    callback_data: PatientsMenuFactory,
) -> None:
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –¥–∞–Ω–Ω—ã–µ –ø–∞—Ü–∏–µ–Ω—Ç–∞."""
    await callback.answer()

    if (
        not callback.from_user
        or not callback.message
        or isinstance(callback.message, InaccessibleMessage)
    ):
        return

    user_id = callback.from_user.id
    patient_id = callback_data.patient_id

    if patient_id is None:
        if callback.message:
            await callback.message.edit_text(
                "‚ùå <b>–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π ID –ø–∞—Ü–∏–µ–Ω—Ç–∞</b>\n\n"
                "–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–µ—Ä–µ–π—Ç–∏ –∫ —Å–ø–∏—Å–∫—É –ø–∞—Ü–∏–µ–Ω—Ç–æ–≤ –∑–∞–Ω–æ–≤–æ.",
            )
        return

    try:
        async with get_or_create_session() as session:
            patients_service = PatientsService(session)
            patient = await patients_service.get_patient_by_id(patient_id)

            if not patient or patient.user_id != user_id:
                if callback.message:
                    await callback.message.edit_text(
                        "‚ùå <b>–ü–∞—Ü–∏–µ–Ω—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω</b>\n\n"
                        "–í–æ–∑–º–æ–∂–Ω–æ, –æ–Ω –±—ã–ª —É–¥–∞–ª–µ–Ω –∏–ª–∏ —É –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ –Ω–µ–º—É.",
                    )
                return

            # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –§–ò–û
            full_name = f"{patient.last_name} {patient.first_name}"
            if patient.middle_name:
                full_name += f" {patient.middle_name}"

            # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –ø–æ–ª–∏—Å –û–ú–°
            polis_text = "–ù–µ —É–∫–∞–∑–∞–Ω"
            if patient.polis_s or patient.polis_n:
                polis_parts: "list[str]" = []
                if patient.polis_s:
                    polis_parts.append(patient.polis_s)
                if patient.polis_n:
                    polis_parts.append(patient.polis_n)
                polis_text = " ".join(polis_parts)

            patient_text = (
                "üë§ <b>–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ø–∞—Ü–∏–µ–Ω—Ç–µ</b>\n\n"
                f"üìù <b>–§–ò–û:</b> {full_name}\n"
                f"üìÖ <b>–î–∞—Ç–∞ —Ä–æ–∂–¥–µ–Ω–∏—è:</b> {patient.birth_date.strftime('%d.%m.%Y')}\n"
                f"üì± <b>–¢–µ–ª–µ—Ñ–æ–Ω:</b> {patient.phone or '–ù–µ —É–∫–∞–∑–∞–Ω'}\n"
                f"üìß <b>Email:</b> {patient.email or '–ù–µ —É–∫–∞–∑–∞–Ω'}\n"
                f"üÜî <b>–ü–æ–ª–∏—Å –û–ú–°:</b> {polis_text}\n\n"
                "üí° <i>–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫–∏ –Ω–∏–∂–µ –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –ø–∞—Ü–∏–µ–Ω—Ç–æ–º</i>"
            )

            keyboard = get_patient_view_keyboard(patient.id)

            if callback.message:
                await callback.message.edit_text(
                    patient_text,
                    reply_markup=keyboard,
                )

    except Exception as e:
        logger.error(
            f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ—Å–º–æ—Ç—Ä–µ –ø–∞—Ü–∏–µ–Ω—Ç–∞ {patient_id}: {e}",
        )
        if callback.message:
            await callback.message.edit_text(
                "‚ùå <b>–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞</b>\n\n"
                "–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–∞—Ü–∏–µ–Ω—Ç–µ. "
                "–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ –∏–ª–∏ –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –≤ –ø–æ–¥–¥–µ—Ä–∂–∫—É.",
            )


@router.callback_query(PatientsMenuFactory.filter(F.action == "delete"))
async def delete_patient_callback(
    callback: CallbackQuery,
    callback_data: PatientsMenuFactory,
) -> None:
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ —É–¥–∞–ª–µ–Ω–∏—è –ø–∞—Ü–∏–µ–Ω—Ç–∞."""
    await callback.answer()

    if (
        not callback.from_user
        or not callback.message
        or isinstance(callback.message, InaccessibleMessage)
    ):
        return

    user_id = callback.from_user.id
    patient_id = callback_data.patient_id

    if patient_id is None:
        if callback.message:
            await callback.message.edit_text(
                "‚ùå <b>–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π ID –ø–∞—Ü–∏–µ–Ω—Ç–∞</b>\n\n"
                "–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–µ—Ä–µ–π—Ç–∏ –∫ —Å–ø–∏—Å–∫—É –ø–∞—Ü–∏–µ–Ω—Ç–æ–≤ –∑–∞–Ω–æ–≤–æ.",
            )
        return

    try:
        async with get_or_create_session() as session:
            patients_service = PatientsService(session)
            patient = await patients_service.get_patient_by_id(patient_id)

            if not patient or patient.user_id != user_id:
                if callback.message:
                    await callback.message.edit_text(
                        "‚ùå <b>–ü–∞—Ü–∏–µ–Ω—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω</b>\n\n"
                        "–í–æ–∑–º–æ–∂–Ω–æ, –æ–Ω –±—ã–ª —É–¥–∞–ª–µ–Ω –∏–ª–∏ —É –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ –Ω–µ–º—É.",
                    )
                return

            # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –§–ò–û
            full_name = f"{patient.last_name} {patient.first_name}"
            if patient.middle_name:
                full_name += f" {patient.middle_name}"

            keyboard = get_patient_delete_keyboard(patient.id)

            if callback.message:
                await callback.message.edit_text(
                    f"‚ö†Ô∏è <b>–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ —É–¥–∞–ª–µ–Ω–∏—è</b>\n\n"
                    f"–í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ —É–¥–∞–ª–∏—Ç—å –ø–∞—Ü–∏–µ–Ω—Ç–∞?\n\n"
                    f"üë§ <b>–§–ò–û:</b> {full_name}\n"
                    "üìÖ <b>–î–∞—Ç–∞ —Ä–æ–∂–¥–µ–Ω–∏—è:</b> "
                    f"{patient.birth_date.strftime('%d.%m.%Y')}\n\n"
                    f"‚ö†Ô∏è <i>–≠—Ç–æ –¥–µ–π—Å—Ç–≤–∏–µ –Ω–µ–ª—å–∑—è –±—É–¥–µ—Ç –æ—Ç–º–µ–Ω–∏—Ç—å</i>",
                    reply_markup=keyboard,
                )

    except Exception as e:
        logger.error(
            f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –ø–∞—Ü–∏–µ–Ω—Ç–∞ {patient_id}: {e}",
        )
        if callback.message:
            await callback.message.edit_text(
                "‚ùå <b>–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞</b>\n\n"
                "–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–¥–≥–æ—Ç–æ–≤–∏—Ç—å —É–¥–∞–ª–µ–Ω–∏–µ –ø–∞—Ü–∏–µ–Ω—Ç–∞. "
                "–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ –∏–ª–∏ –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –≤ –ø–æ–¥–¥–µ—Ä–∂–∫—É.",
            )


@router.callback_query(PatientsMenuFactory.filter(F.action == "delete_confirm"))
async def delete_patient_confirm_callback(
    callback: CallbackQuery,
    callback_data: PatientsMenuFactory,
) -> None:
    """–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–∞–µ—Ç —É–¥–∞–ª–µ–Ω–∏–µ –ø–∞—Ü–∏–µ–Ω—Ç–∞."""
    await callback.answer()

    if (
        not callback.from_user
        or not callback.message
        or isinstance(callback.message, InaccessibleMessage)
    ):
        return

    user_id = callback.from_user.id
    patient_id = callback_data.patient_id

    if patient_id is None:
        if callback.message:
            await callback.message.edit_text(
                "‚ùå <b>–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π ID –ø–∞—Ü–∏–µ–Ω—Ç–∞</b>\n\n"
                "–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–µ—Ä–µ–π—Ç–∏ –∫ —Å–ø–∏—Å–∫—É –ø–∞—Ü–∏–µ–Ω—Ç–æ–≤ –∑–∞–Ω–æ–≤–æ.",
            )
        return

    try:
        async with get_or_create_session() as session:
            patients_service = PatientsService(session)
            patient = await patients_service.get_patient_by_id(patient_id)

            if not patient or patient.user_id != user_id:
                if callback.message:
                    await callback.message.edit_text(
                        "‚ùå <b>–ü–∞—Ü–∏–µ–Ω—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω</b>\n\n"
                        "–í–æ–∑–º–æ–∂–Ω–æ, –æ–Ω —É–∂–µ –±—ã–ª —É–¥–∞–ª–µ–Ω –∏–ª–∏ —É –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ –Ω–µ–º—É.",
                    )
                return

            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –§–ò–û –¥–ª—è —Å–æ–æ–±—â–µ–Ω–∏—è –æ–± —É—Å–ø–µ—Ö–µ
            full_name = f"{patient.last_name} {patient.first_name}"
            if patient.middle_name:
                full_name += f" {patient.middle_name}"

            # –£–¥–∞–ª—è–µ–º –ø–∞—Ü–∏–µ–Ω—Ç–∞
            await patients_service.delete_patient(patient_id)

            keyboard = get_patient_deleted_keyboard()

            if callback.message:
                await callback.message.edit_text(
                    f"‚úÖ <b>–ü–∞—Ü–∏–µ–Ω—Ç —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω</b>\n\n"
                    f"üë§ <b>–§–ò–û:</b> {full_name}\n\n"
                    f"üóëÔ∏è <i>–í—Å–µ –¥–∞–Ω–Ω—ã–µ –ø–∞—Ü–∏–µ–Ω—Ç–∞ –±—ã–ª–∏ —É–¥–∞–ª–µ–Ω—ã –∏–∑ —Å–∏—Å—Ç–µ–º—ã</i>",
                    reply_markup=keyboard,
                )

            logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} —É–¥–∞–ª–∏–ª –ø–∞—Ü–∏–µ–Ω—Ç–∞ {patient_id}")

    except Exception as e:
        logger.error(
            f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–∏ —É–¥–∞–ª–µ–Ω–∏—è –ø–∞—Ü–∏–µ–Ω—Ç–∞ {patient_id}: {e}",
        )
        if callback.message:
            await callback.message.edit_text(
                "‚ùå <b>–û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è</b>\n\n"
                "–ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å –ø–∞—Ü–∏–µ–Ω—Ç–∞. "
                "–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ –∏–ª–∏ –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –≤ –ø–æ–¥–¥–µ—Ä–∂–∫—É.",
            )


@router.callback_query(PatientsMenuFactory.filter(F.action == "toggle_same_day"))
async def toggle_same_day_callback(
    callback: CallbackQuery,
) -> None:
    """Switch same day booking setting."""
    await callback.answer()

    if (
        not callback.from_user
        or not callback.message
        or isinstance(callback.message, InaccessibleMessage)
    ):
        return

    user_id = callback.from_user.id

    try:
        async with get_or_create_session() as session:
            users_service = UsersService(session)
            user = await users_service.get_user_by_id(user_id)

            if not user:
                if callback.message:
                    await callback.message.edit_text(
                        "‚ùå <b>–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω</b>\n\n"
                        "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /start –¥–ª—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏.",
                    )
                return

            # –ü–µ—Ä–µ–∫–ª—é—á–∞–µ–º —Ñ–ª–∞–≥
            new_value = not user.no_same_day_booking
            await users_service.update(user_id, no_same_day_booking=new_value)
            await users_service.save()

            # –û–±–Ω–æ–≤–ª—è–µ–º –º–µ–Ω—é –ø–∞—Ü–∏–µ–Ω—Ç–æ–≤
            await send_patients_menu(user_id, callback.message, edit_message=True)

            action_text = "disabled" if new_value else "enabled"
            logger.info(f"User {user_id} {action_text} same day booking")

    except Exception as e:
        logger.error(
            f"Error changing same day booking setting for user {user_id}: {e}",
        )
        if callback.message:
            await callback.message.edit_text(
                "‚ùå <b>–û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –Ω–∞—Å—Ç—Ä–æ–µ–∫</b>\n\n"
                "–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ –∏–ª–∏ –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –≤ –ø–æ–¥–¥–µ—Ä–∂–∫—É.",
            )
