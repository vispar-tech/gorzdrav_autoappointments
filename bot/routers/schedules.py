"""Router for handling schedules."""

import contextlib
import time
from datetime import time as dt_time
from typing import TYPE_CHECKING

from aiogram import Bot, F, Router
from aiogram.filters import Command
from aiogram.fsm.context import FSMContext
from aiogram.types import CallbackQuery, InaccessibleMessage, Message
from loguru import logger

from bot.api.client import GorzdravAPIClient, GorzdravAPIError
from bot.db.context import get_or_create_session
from bot.db.models.enums import ScheduleStatus
from bot.db.models.schedules import Schedule
from bot.db.services import PatientsService, SchedulesService, UsersService
from bot.settings.settings import settings
from bot.utils.callbacks import SchedulesMenuFactory
from bot.utils.keyboards import (
    get_doctors_select_keyboard,
    get_lpu_select_keyboard,
    get_patient_select_keyboard,
    get_schedule_cancel_keyboard,
    get_schedule_create_confirmation_keyboard,
    get_schedule_delete_keyboard,
    get_schedule_deleted_keyboard,
    get_schedule_view_keyboard,
    get_schedules_empty_keyboard,
    get_schedules_keyboard,
    get_specialist_select_keyboard,
)
from bot.utils.states import ScheduleFormStates

if TYPE_CHECKING:
    from bot.api.models import Attachment
    from bot.db.models.users import User

router = Router(name="schedules")

RATE_LIMIT_SECONDS = 5


async def check_rate_limit(state: FSMContext) -> tuple[bool, int]:
    """
    –ü—Ä–æ–≤–µ—Ä—è–µ—Ç rate limit –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏—Å–ø–æ–ª—å–∑—É—è FSMContext.

    Returns:
        tuple[bool, int]: (–º–æ–∂–Ω–æ_–≤—ã–ø–æ–ª–Ω–∏—Ç—å, –æ—Å—Ç–∞–≤—à–µ–µ—Å—è_–≤—Ä–µ–º—è_–≤_—Å–µ–∫—É–Ω–¥–∞—Ö)
    """
    current_time = time.time()
    data = await state.get_data()
    last_call_time = data.get("last_schedules_call", 0)

    if current_time - last_call_time >= RATE_LIMIT_SECONDS:
        await state.update_data(last_schedules_call=current_time)
        return True, 0

    remaining_time = RATE_LIMIT_SECONDS - int(current_time - last_call_time)
    return False, remaining_time


def get_tariff_info(user: "User") -> str:
    """Return information about the user's tariff."""
    if user.is_subscribed:
        count = settings.MAX_SUBSCRIBED_SCHEDULES
        if count % 10 == 1 and count % 100 != 11:
            word = "—Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ"
        elif count % 10 in [2, 3, 4] and count % 100 not in [12, 13, 14]:
            word = "—Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è"
        else:
            word = "—Ä–∞—Å–ø–∏—Å–∞–Ω–∏–π"
        return f"üíé <b>–ü–ª–∞—Ç–Ω—ã–π —Ç–∞—Ä–∏—Ñ:</b> –¥–æ {count} {word} (–∞–∫—Ç–∏–≤–Ω—ã—Ö)"

    count = settings.MAX_UNSUBSCRIBED_SCHEDULES
    if count % 10 == 1 and count % 100 != 11:
        word = "—Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ"
    elif count % 10 in [2, 3, 4] and count % 100 not in [12, 13, 14]:
        word = "—Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è"
    else:
        word = "—Ä–∞—Å–ø–∏—Å–∞–Ω–∏–π"
    return f"üÜì <b>–ë–µ—Å–ø–ª–∞—Ç–Ω—ã–π —Ç–∞—Ä–∏—Ñ:</b> {count} {word}"


async def send_schedules_menu(
    user_id: int,
    message: Message,
    *,
    edit_message: bool = False,
) -> Message:
    """Set the schedules menu."""
    async with get_or_create_session() as session:
        users_service = UsersService(session)
        schedules_service = SchedulesService(session)

        user = await users_service.get_user_by_id(user_id)
        if not user:
            if edit_message:
                await message.edit_text(
                    "‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /start –¥–ª—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏.",
                )
                return message
            return await message.answer(
                "‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /start –¥–ª—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏.",
            )

        schedules = list(await schedules_service.find_all_by_user_id(user_id))

        pending_schedules = [s for s in schedules if s.status == ScheduleStatus.PENDING]
        [s for s in schedules if s.status == ScheduleStatus.FOUND]

        if not schedules:
            text = (
                f"üìÖ <b>–í–∞—à–∏ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è</b>\n\n"
                f"{get_tariff_info(user)}\n\n"
                '–£ –≤–∞—Å –Ω–µ—Ç —Å–æ–∑–¥–∞–Ω–Ω—ã—Ö —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–π. –ù–∞–∂–º–∏—Ç–µ "–°–æ–∑–¥–∞—Ç—å —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ".'
            )
            keyboard = get_schedules_empty_keyboard(user)
        else:
            # –ü–æ–¥—Å—á–∏—Ç—ã–≤–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
            found_schedules = [s for s in schedules if s.status == ScheduleStatus.FOUND]
            found_count = len(found_schedules)

            # –ü–æ–¥—Å—á–∏—Ç—ã–≤–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ç–∞—Ä–∏—Ñ–∞
            if user.is_subscribed:
                active_count = len(pending_schedules)
                max_schedules = settings.MAX_SUBSCRIBED_SCHEDULES

                # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç–µ–∫—Å—Ç –¥–ª—è –ª–∏–º–∏—Ç–∞
                bottom_text = ""
                if active_count >= max_schedules:
                    bottom_text = (
                        "‚ùå –õ–∏–º–∏—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–π –¥–æ—Å—Ç–∏–≥–Ω—É—Ç, –æ–Ω –æ—Å–≤–æ–±–æ–¥–∏—Ç—Å—è, "
                        "–∫–æ–≥–¥–∞ –≤—ã–ø–æ–ª–Ω–∏—Ç—Å—è —Ö–æ—Ç—è –±—ã –æ–¥–Ω–æ –∏–∑ –Ω–∏—Ö."
                    )

                text = (
                    f"üìÖ <b>–í–∞—à–∏ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è</b>\n\n"
                    f"{get_tariff_info(user)}\n"
                    f"‚úÖ –í—ã–ø–æ–ª–Ω–µ–Ω–æ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–π: {found_count}\n\n"
                    f"{bottom_text}"
                )
            else:
                total_schedules = len(schedules)
                max_schedules = settings.MAX_UNSUBSCRIBED_SCHEDULES

                # –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è –¥–ª—è –±–µ—Å–ø–ª–∞—Ç–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π:
                # –∞) –Ω–µ –±–æ–ª—å—à–µ 2 –∞–∫—Ç–∏–≤–Ω—ã—Ö —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–π
                # –±) —Å–æ–∑–¥–∞–Ω–∏–µ –¥–æ—Å—Ç—É–ø–Ω–æ —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –Ω–µ—Ç –¥–≤—É—Ö –≤—ã–ø–æ–ª–Ω–µ–Ω–Ω—ã—Ö

                if total_schedules >= max_schedules:
                    # –î–æ—Å—Ç–∏–≥–Ω—É—Ç –ª–∏–º–∏—Ç –Ω–∞–π–¥–µ–Ω–Ω—ã—Ö –∑–∞–ø–∏—Å–µ–π
                    text = (
                        f"üìÖ <b>–í–∞—à–∏ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è</b>\n\n"
                        f"{get_tariff_info(user)}\n"
                        f"‚úÖ –í—ã–ø–æ–ª–Ω–µ–Ω–æ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–π: {found_count}\n\n"
                        f"‚ùå –£ –≤–∞—Å –∑–∞–∫–æ–Ω—á–∏–ª–∏—Å—å –±–µ—Å–ø–ª–∞—Ç–Ω—ã–µ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è.\n"
                        f"üíé –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /subscribe –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –ø—Ä–µ–º–∏—É–º –¥–æ—Å—Ç—É–ø–∞."
                    )
                else:
                    # –ú–æ–∂–Ω–æ —Å–æ–∑–¥–∞–≤–∞—Ç—å –Ω–æ–≤—ã–µ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è
                    text = (
                        f"üìÖ <b>–í–∞—à–∏ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è</b>\n\n"
                        f"{get_tariff_info(user)}\n"
                        f"‚úÖ –í—ã–ø–æ–ª–Ω–µ–Ω–æ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–π: {found_count}\n"
                    )
            keyboard = await get_schedules_keyboard(schedules, user)

        if edit_message:
            await message.edit_text(text, reply_markup=keyboard)
            return message
        return await message.answer(text, reply_markup=keyboard)


@router.message(Command("schedules"))
@router.message(F.text == "üìÖ –†–∞—Å–ø–∏—Å–∞–Ω–∏—è")
async def schedules_handler(message: Message, state: FSMContext) -> None:
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –º–µ–Ω—é —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–π."""
    if not message.from_user:
        await message.answer(
            "‚ùå –¢–µ—Ö–Ω–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å–æ–æ–±—â–µ–Ω–∏—è",
        )
        return

    user_id = message.from_user.id

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º rate limit
    can_execute, remaining_time = await check_rate_limit(state)
    if not can_execute:
        await message.answer(
            f"‚è≥ <b>–°–ª–∏—à–∫–æ–º —á–∞—Å—Ç—ã–µ –∑–∞–ø—Ä–æ—Å—ã</b>\n\n"
            f"–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–¥–æ–∂–¥–∏—Ç–µ {remaining_time} —Å–µ–∫—É–Ω–¥ "
            f"–ø–µ—Ä–µ–¥ —Å–ª–µ–¥—É—é—â–∏–º –∑–∞–ø—Ä–æ—Å–æ–º —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–π.",
        )
        return

    try:
        await send_schedules_menu(user_id, message)
    except Exception as e:
        logger.error(
            f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å–ø–∏—Å–∫–∞ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–π –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}: {e}",
        )
        await message.answer(
            "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å–ø–∏—Å–∫–∞ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–π. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.",
        )


@router.callback_query(SchedulesMenuFactory.filter(F.action == "list"))
async def list_schedules_callback(callback: CallbackQuery, state: FSMContext) -> None:
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –º–µ–Ω—é —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–π."""
    await callback.answer()
    if not callback.message or isinstance(callback.message, InaccessibleMessage):
        return
    await send_schedules_menu(
        callback.from_user.id,
        callback.message,
        edit_message=True,
    )


@router.callback_query(SchedulesMenuFactory.filter(F.action == "create"))
async def create_schedule_callback(
    callback: CallbackQuery,
    state: FSMContext,
) -> None:
    """–ù–∞—á–∏–Ω–∞–µ—Ç –ø—Ä–æ—Ü–µ—Å—Å —Å–æ–∑–¥–∞–Ω–∏—è —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è."""
    await callback.answer()

    if (
        not callback.from_user
        or not callback.message
        or isinstance(callback.message, InaccessibleMessage)
    ):
        return

    user_id = callback.from_user.id

    try:
        async with get_or_create_session() as session:
            users_service = UsersService(session)
            patients_service = PatientsService(session)
            schedules_service = SchedulesService(session)

            # –ü–æ–ª—É—á–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            user = await users_service.get_user_by_id(user_id)
            if not user:
                if callback.message:
                    await callback.message.edit_text(
                        "‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω. "
                        "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /start –¥–ª—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏.",
                    )
                return

            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ª–∏–º–∏—Ç —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–π –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ç–∞—Ä–∏—Ñ–∞
            schedules = list(await schedules_service.find_all_by_user_id(user_id))

            if user.is_subscribed:
                # –ü–ª–∞—Ç–Ω—ã–µ: –º–∞–∫—Å–∏–º—É–º 10 –∞–∫—Ç–∏–≤–Ω—ã—Ö —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–π (–Ω–µ –æ—Ç–º–µ–Ω–µ–Ω–Ω—ã—Ö)
                active_schedules = [
                    s for s in schedules if s.status != ScheduleStatus.PENDING
                ]
                max_schedules = settings.MAX_SUBSCRIBED_SCHEDULES
                current_count = len(active_schedules)

                if current_count >= max_schedules:
                    await callback.message.edit_text(
                        f"‚ùå <b>–õ–∏–º–∏—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–π –¥–æ—Å—Ç–∏–≥–Ω—É—Ç</b>\n\n"
                        f"üìä –ê–∫—Ç–∏–≤–Ω—ã—Ö —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–π: {current_count}/{max_schedules}\n"
                        f"üí° <i>–£–¥–∞–ª–∏—Ç–µ –æ–¥–Ω–æ –∏–∑ —Å—É—â–µ—Å—Ç–≤—É—é—â–∏—Ö —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–π –∏–ª–∏ "
                        f"–¥–æ–∂–¥–∏—Ç–µ—Å—å –∏—Å–ø–æ–ª–Ω–µ–Ω–∏—è –∑–∞–ø–∏—Å–∏</i>",
                    )
                    return
            else:
                # –ë–µ—Å–ø–ª–∞—Ç–Ω—ã–µ: –º–∞–∫—Å–∏–º—É–º 2 –Ω–∞–π–¥–µ–Ω–Ω—ã–µ –∑–∞–ø–∏—Å–∏ (–µ–¥–∏–Ω–æ—Ä–∞–∑–æ–≤–æ)
                found_schedules = [
                    s for s in schedules if s.status == ScheduleStatus.FOUND
                ]
                max_found = 2
                found_count = len(found_schedules)

                if found_count >= max_found:
                    await callback.message.edit_text(
                        f"‚ùå <b>–õ–∏–º–∏—Ç –Ω–∞–π–¥–µ–Ω–Ω—ã—Ö –∑–∞–ø–∏—Å–µ–π –¥–æ—Å—Ç–∏–≥–Ω—É—Ç</b>\n\n"
                        f"‚úÖ –ù–∞–π–¥–µ–Ω–æ –∑–∞–ø–∏—Å–µ–π: {found_count}/{max_found}\n"
                        f"üíé <i>–î–ª—è —É–≤–µ–ª–∏—á–µ–Ω–∏—è –ª–∏–º–∏—Ç–∞ –æ—Ñ–æ—Ä–º–∏—Ç–µ –ø–æ–¥–ø–∏—Å–∫—É: "
                        "/subscribe</i>\n\n"
                        f"‚ÑπÔ∏è <i>–ë–µ—Å–ø–ª–∞—Ç–Ω—ã–π —Ç–∞—Ä–∏—Ñ –ø–æ–∑–≤–æ–ª—è–µ—Ç –Ω–∞–π—Ç–∏ —Ç–æ–ª—å–∫–æ 2 –∑–∞–ø–∏—Å–∏ "
                        f"–∑–∞ –≤—Å–µ –≤—Ä–µ–º—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è</i>",
                    )
                    return

            # –ü–æ–ª—É—á–∞–µ–º –ø–∞—Ü–∏–µ–Ω—Ç–æ–≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            patients = await patients_service.get_patients_by_user_id(user_id)
            if not patients:
                await callback.message.edit_text(
                    "‚ùå <b>–ù–µ—Ç –ø–∞—Ü–∏–µ–Ω—Ç–æ–≤ –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è</b>\n\n"
                    "–°–Ω–∞—á–∞–ª–∞ –¥–æ–±–∞–≤—å—Ç–µ –ø–∞—Ü–∏–µ–Ω—Ç–∞ –≤ —Ä–∞–∑–¥–µ–ª–µ /patients",
                )
                return

            # –ù–∞—á–∏–Ω–∞–µ–º —Å–æ–∑–¥–∞–Ω–∏–µ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è
            await state.set_state(ScheduleFormStates.waiting_for_patient)
            await state.update_data(message_id=callback.message.message_id)
            await callback.message.edit_text(
                "üë§ <b>–í—ã–±–µ—Ä–∏—Ç–µ –ø–∞—Ü–∏–µ–Ω—Ç–∞ –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è:</b>",
                reply_markup=get_patient_select_keyboard(patients),
            )

    except Exception as e:
        logger.error(
            f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –Ω–∞—á–∞–ª–µ —Å–æ–∑–¥–∞–Ω–∏—è —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}: {e}",
        )
        if callback.message:
            await callback.message.edit_text(
                "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.",
            )


@router.callback_query(SchedulesMenuFactory.filter(F.action == "select_patient"))
async def select_patient_callback(
    callback: CallbackQuery,
    callback_data: SchedulesMenuFactory,
    state: FSMContext,
) -> None:
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –≤—ã–±–æ—Ä –ø–∞—Ü–∏–µ–Ω—Ç–∞."""
    await callback.answer()

    if (
        not callback.from_user
        or not callback.message
        or isinstance(callback.message, InaccessibleMessage)
    ):
        return

    user_id = callback.from_user.id
    patient_id = callback_data.patient_id

    if patient_id is None:
        await callback.message.edit_text(
            "‚ùå <b>–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π ID –ø–∞—Ü–∏–µ–Ω—Ç–∞</b>\n\n"
            "–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–µ—Ä–µ–π—Ç–∏ –∫ —Å–æ–∑–¥–∞–Ω–∏—é —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è –∑–∞–Ω–æ–≤–æ.",
        )
        return

    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –∑–∞–≥—Ä—É–∑–∫–∏
    await callback.message.edit_text(
        "‚è≥ <b>–ó–∞–≥—Ä—É–∑–∫–∞...</b>\n\n–ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –æ –ø—Ä–∏–∫—Ä–µ–ø–ª–µ–Ω–∏—è—Ö –ø–∞—Ü–∏–µ–Ω—Ç–∞...",
    )

    try:
        async with get_or_create_session() as session:
            patients_service = PatientsService(session)
            patient = await patients_service.get_patient_by_id(patient_id)

            if not patient or patient.user_id != user_id:
                await callback.message.edit_text(
                    "‚ùå <b>–ü–∞—Ü–∏–µ–Ω—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω</b>\n\n"
                    "–í–æ–∑–º–æ–∂–Ω–æ, –æ–Ω –±—ã–ª —É–¥–∞–ª–µ–Ω –∏–ª–∏ —É –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ –Ω–µ–º—É.",
                )
                return

            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ –ø–∞—Ü–∏–µ–Ω—Ç–∞
            await state.update_data(selected_patient_id=patient_id)

            # –ü–æ–ª—É—á–∞–µ–º –ø—Ä–∏–∫—Ä–µ–ø–ª–µ–Ω–∏—è –¥–ª—è –ø–∞—Ü–∏–µ–Ω—Ç–∞
            async with GorzdravAPIClient() as api_client:
                attachments_response = await api_client.get_attachments(
                    polis_s=patient.polis_s,
                    polis_n=patient.polis_n,
                )

                if not attachments_response.success or not attachments_response.result:
                    await callback.message.edit_text(
                        "‚ùå <b>–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –ø—Ä–∏–∫—Ä–µ–ø–ª–µ–Ω–∏—è</b>\n\n"
                        "–ü—Ä–æ–≤–µ—Ä—å—Ç–µ –¥–∞–Ω–Ω—ã–µ –ø–æ–ª–∏—Å–∞ –û–ú–° –ø–∞—Ü–∏–µ–Ω—Ç–∞.",
                    )
                    await state.clear()
                    return

                # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –≤ –∫–∞–∫–∏—Ö –õ–ü–£ –Ω–∞–π–¥–µ–Ω –ø–∞—Ü–∏–µ–Ω—Ç
                available_attachments: "list[Attachment]" = []
                for attachment in attachments_response.result:
                    try:
                        search_response = await api_client.search_patient(
                            lpu_id=attachment.id,
                            last_name=patient.last_name,
                            first_name=patient.first_name,
                            middle_name=patient.middle_name or "",
                            birthdate_iso=patient.birth_date.isoformat(),
                        )

                        if search_response.success and search_response.result:
                            available_attachments.append(attachment)
                    except GorzdravAPIError:
                        continue

                if not available_attachments:
                    await callback.message.edit_text(
                        "‚ùå <b>–ü–∞—Ü–∏–µ–Ω—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ —Å–∏—Å—Ç–µ–º–µ –ì–æ—Ä–ó–¥—Ä–∞–≤</b>\n\n"
                        "–ü—Ä–æ–≤–µ—Ä—å—Ç–µ –¥–∞–Ω–Ω—ã–µ –ø–∞—Ü–∏–µ–Ω—Ç–∞ –∏–ª–∏ –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.",
                    )
                    await state.clear()
                    return

                # –ü–µ—Ä–µ—Ö–æ–¥–∏–º –∫ –≤—ã–±–æ—Ä—É –õ–ü–£
                await state.set_state(ScheduleFormStates.waiting_for_lpu)
                await callback.message.edit_text(
                    "üè• <b>–í—ã–±–µ—Ä–∏—Ç–µ –º–µ–¥–∏—Ü–∏–Ω—Å–∫–æ–µ —É—á—Ä–µ–∂–¥–µ–Ω–∏–µ:</b>",
                    reply_markup=get_lpu_select_keyboard(available_attachments),
                )

    except Exception as e:
        logger.error(
            f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–±–æ—Ä–µ –ø–∞—Ü–∏–µ–Ω—Ç–∞ {patient_id}: {e}",
        )
        await callback.message.edit_text(
            "‚ùå <b>–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞</b>\n\n"
            "–ù–µ —É–¥–∞–ª–æ—Å—å –æ–±—Ä–∞–±–æ—Ç–∞—Ç—å –≤—ã–±–æ—Ä –ø–∞—Ü–∏–µ–Ω—Ç–∞. "
            "–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ –∏–ª–∏ –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –≤ –ø–æ–¥–¥–µ—Ä–∂–∫—É.",
        )


@router.callback_query(SchedulesMenuFactory.filter(F.action == "select_lpu"))
async def select_lpu_callback(
    callback: CallbackQuery,
    callback_data: SchedulesMenuFactory,
    state: FSMContext,
) -> None:
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –≤—ã–±–æ—Ä –õ–ü–£."""
    await callback.answer()

    if (
        not callback.from_user
        or not callback.message
        or isinstance(callback.message, InaccessibleMessage)
    ):
        return

    lpu_id = callback_data.lpu_id

    if lpu_id is None:
        await callback.message.edit_text(
            "‚ùå <b>–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π ID –õ–ü–£</b>\n\n"
            "–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–µ—Ä–µ–π—Ç–∏ –∫ —Å–æ–∑–¥–∞–Ω–∏—é —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è –∑–∞–Ω–æ–≤–æ.",
        )
        return

    try:
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤—ã–±—Ä–∞–Ω–Ω–æ–µ –õ–ü–£
        selected_patient_id = (await state.get_data()).get("selected_patient_id")
        await state.update_data(selected_lpu_id=lpu_id)

        # –ü–æ–ª—É—á–∞–µ–º —Å–ø–µ—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –¥–ª—è –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ –õ–ü–£
        async with GorzdravAPIClient() as api_client:
            specialists_response = await api_client.get_specialists(int(lpu_id or 0))
            lpu_response = await api_client.get_lpu_by_id(int(lpu_id or 0))

        if (
            not specialists_response.success
            or not specialists_response.result
            or not lpu_response
        ):
            await callback.message.edit_text(
                "‚ùå <b>–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Å–ø–µ—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏</b>\n\n"
                "–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –≤—ã–±—Ä–∞—Ç—å –¥—Ä—É–≥–æ–µ –º–µ–¥–∏—Ü–∏–Ω—Å–∫–æ–µ —É—á—Ä–µ–∂–¥–µ–Ω–∏–µ.",
            )
            return

        # –ü–µ—Ä–µ—Ö–æ–¥–∏–º –∫ –≤—ã–±–æ—Ä—É —Å–ø–µ—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏
        await state.set_state(ScheduleFormStates.waiting_for_specialist)
        if not selected_patient_id:
            await callback.message.edit_text(
                "‚ùå <b>–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π ID –ø–∞—Ü–∏–µ–Ω—Ç–∞</b>\n\n"
                "–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–µ—Ä–µ–π—Ç–∏ –∫ —Å–æ–∑–¥–∞–Ω–∏—é —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è –∑–∞–Ω–æ–≤–æ.",
            )
            return
        await callback.message.edit_text(
            (
                f"ü©∫ <b>–í—ã–±–µ—Ä–∏—Ç–µ —Å–ø–µ—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—é –≤ "
                f"{lpu_response.lpu_full_name or lpu_response.lpu_short_name or '–õ–ü–£'}"
                f":</b>"
            ),
            reply_markup=get_specialist_select_keyboard(
                specialists_response.result,
                selected_patient_id,
            ),
        )

    except Exception as e:
        logger.error(
            f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–±–æ—Ä–µ –õ–ü–£ {lpu_id}: {e}",
        )
        await callback.message.edit_text(
            "‚ùå <b>–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞</b>\n\n"
            "–ù–µ —É–¥–∞–ª–æ—Å—å –æ–±—Ä–∞–±–æ—Ç–∞—Ç—å –≤—ã–±–æ—Ä –õ–ü–£. "
            "–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ –∏–ª–∏ –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –≤ –ø–æ–¥–¥–µ—Ä–∂–∫—É.",
        )


@router.callback_query(SchedulesMenuFactory.filter(F.action == "select_specialist"))
async def select_specialist_callback(
    callback: CallbackQuery,
    callback_data: SchedulesMenuFactory,
    state: FSMContext,
) -> None:
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –≤—ã–±–æ—Ä —Å–ø–µ—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏."""
    await callback.answer()

    if (
        not callback.from_user
        or not callback.message
        or isinstance(callback.message, InaccessibleMessage)
    ):
        return

    specialist_id = callback_data.specialist_id

    if specialist_id is None:
        await callback.message.edit_text(
            "‚ùå <b>–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π ID —Å–ø–µ—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏</b>\n\n"
            "–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–µ—Ä–µ–π—Ç–∏ –∫ —Å–æ–∑–¥–∞–Ω–∏—é —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è –∑–∞–Ω–æ–≤–æ.",
        )
        return

    try:
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤—ã–±—Ä–∞–Ω–Ω—É—é —Å–ø–µ—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—é
        await state.update_data(selected_specialist_id=specialist_id)

        data = await state.get_data()
        lpu_id = data.get("selected_lpu_id")

        if not lpu_id:
            await callback.message.edit_text(
                "‚ùå <b>–û—à–∏–±–∫–∞: –Ω–µ –≤—ã–±—Ä–∞–Ω–æ –õ–ü–£</b>\n\n"
                "–ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–æ–∑–¥–∞—Ç—å —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ –∑–∞–Ω–æ–≤–æ.",
            )
            await state.clear()
            return

        # –ü–æ–ª—É—á–∞–µ–º –≤—Ä–∞—á–µ–π –¥–ª—è –≤—ã–±—Ä–∞–Ω–Ω–æ–π —Å–ø–µ—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏
        async with GorzdravAPIClient() as api_client:
            doctors_response = await api_client.get_doctors(
                int(lpu_id or 0),
                str(specialist_id or ""),
            )

        if not doctors_response.success or not doctors_response.result:
            await callback.message.edit_text(
                "‚ùå <b>–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –≤—Ä–∞—á–µ–π</b>\n\n"
                "–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –≤—ã–±—Ä–∞—Ç—å –¥—Ä—É–≥—É—é —Å–ø–µ—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—é.",
            )
            return

        # –ü–µ—Ä–µ—Ö–æ–¥–∏–º –∫ –≤—ã–±–æ—Ä—É –≤—Ä–∞—á–µ–π
        await state.set_state(ScheduleFormStates.waiting_for_doctors)
        await state.update_data(selected_doctors=[])
        await callback.message.edit_text(
            "üë®‚Äç‚öïÔ∏è <b>–í—ã–±–µ—Ä–∏—Ç–µ –≤—Ä–∞—á–µ–π (–º–æ–∂–Ω–æ –Ω–µ—Å–∫–æ–ª—å–∫–æ):</b>\n\n"
            "‚úÖ - –≤—ã–±—Ä–∞–Ω\n‚òëÔ∏è - –Ω–µ –≤—ã–±—Ä–∞–Ω",
            reply_markup=get_doctors_select_keyboard(
                doctors_response.result,
                lpu_id,
                [],
            ),
        )

    except Exception as e:
        logger.error(
            f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–±–æ—Ä–µ —Å–ø–µ—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ {specialist_id}: {e}",
        )
        await callback.message.edit_text(
            "‚ùå <b>–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞</b>\n\n"
            "–ù–µ —É–¥–∞–ª–æ—Å—å –æ–±—Ä–∞–±–æ—Ç–∞—Ç—å –≤—ã–±–æ—Ä —Å–ø–µ—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏. "
            "–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ –∏–ª–∏ –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –≤ –ø–æ–¥–¥–µ—Ä–∂–∫—É.",
        )


@router.callback_query(SchedulesMenuFactory.filter(F.action == "toggle_doctor"))
async def toggle_doctor_callback(
    callback: CallbackQuery,
    callback_data: SchedulesMenuFactory,
    state: FSMContext,
) -> None:
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ –≤—ã–±–æ—Ä–∞ –≤—Ä–∞—á–∞."""
    await callback.answer()

    if (
        not callback.from_user
        or not callback.message
        or isinstance(callback.message, InaccessibleMessage)
    ):
        return

    doctor_id = callback_data.doctor_id

    if doctor_id is None:
        return

    try:
        data = await state.get_data()
        selected_doctors = data.get("selected_doctors", [])

        if doctor_id in selected_doctors:
            selected_doctors.remove(doctor_id)
        else:
            selected_doctors.append(doctor_id)

        await state.update_data(selected_doctors=selected_doctors)

        # –û–±–Ω–æ–≤–ª—è–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É
        data = await state.get_data()
        lpu_id = data.get("selected_lpu_id")
        specialist_id = data.get("selected_specialist_id")

        if not lpu_id or not specialist_id:
            await callback.message.edit_text(
                "‚ùå <b>–û—à–∏–±–∫–∞: –ø–æ—Ç–µ—Ä—è–Ω—ã –¥–∞–Ω–Ω—ã–µ</b>\n\n"
                "–ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–æ–∑–¥–∞—Ç—å —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ –∑–∞–Ω–æ–≤–æ.",
            )
            await state.clear()
            return

        async with GorzdravAPIClient() as api_client:
            doctors_response = await api_client.get_doctors(lpu_id, specialist_id)

            if not doctors_response.success or not doctors_response.result:
                await callback.message.edit_text(
                    "‚ùå <b>–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –≤—Ä–∞—á–µ–π</b>\n\n"
                    "–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –≤—ã–±—Ä–∞—Ç—å –¥—Ä—É–≥—É—é —Å–ø–µ—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—é.",
                )
                return

            # –û–±–Ω–æ–≤–ª—è–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å —É—á–µ—Ç–æ–º –≤—ã–±—Ä–∞–Ω–Ω—ã—Ö –≤—Ä–∞—á–µ–π
            keyboard = get_doctors_select_keyboard(
                doctors_response.result,
                lpu_id,
                selected_doctors,
            )

            await callback.message.edit_text(
                "üë®‚Äç‚öïÔ∏è <b>–í—ã–±–µ—Ä–∏—Ç–µ –≤—Ä–∞—á–µ–π (–º–æ–∂–Ω–æ –Ω–µ—Å–∫–æ–ª—å–∫–æ):</b>\n\n"
                "‚úÖ - –≤—ã–±—Ä–∞–Ω\n‚òëÔ∏è - –Ω–µ –≤—ã–±—Ä–∞–Ω",
                reply_markup=keyboard,
            )

    except Exception as e:
        logger.error(
            f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–∏ –≤—Ä–∞—á–∞ {doctor_id}: {e}",
        )
        await callback.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–±–æ—Ä–µ –≤—Ä–∞—á–∞", show_alert=True)


@router.callback_query(SchedulesMenuFactory.filter(F.action == "confirm_doctors"))
async def confirm_doctors_callback(
    callback: CallbackQuery,
    state: FSMContext,
) -> None:
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –≤—ã–±–æ—Ä–∞ –≤—Ä–∞—á–µ–π."""

    if (
        not callback.from_user
        or not callback.message
        or isinstance(callback.message, InaccessibleMessage)
    ):
        return

    try:
        data = await state.get_data()
        selected_doctors = data.get("selected_doctors", [])

        if not selected_doctors:
            await callback.answer(
                text="‚ùå –í—ã–±–µ—Ä–∏—Ç–µ —Ö–æ—Ç—è –±—ã –æ–¥–Ω–æ–≥–æ –≤—Ä–∞—á–∞",
                show_alert=True,
            )
            return

        await callback.answer()

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–¥–ø–∏—Å–∫—É –¥–ª—è –≤–≤–æ–¥–∞ –≤—Ä–µ–º–µ–Ω–∏
        user_id = callback.from_user.id
        async with get_or_create_session() as session:
            users_service = UsersService(session)
            user = await users_service.get_user_by_id(user_id)

            if not user:
                await callback.message.edit_text(
                    "‚ùå <b>–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω</b>\n\n"
                    "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /start –¥–ª—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏.",
                )
                await state.clear()
                return

            if user.is_subscribed:
                # –ü–ª–∞—Ç–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ –º–æ–≥—É—Ç –≤—ã–±—Ä–∞—Ç—å –≤—Ä–µ–º—è
                await state.set_state(ScheduleFormStates.waiting_for_time)
                await callback.message.edit_text(
                    "‚è∞ <b>–í–≤–µ–¥–∏—Ç–µ –ø—Ä–µ–¥–ø–æ—á—Ç–∏—Ç–µ–ª—å–Ω–æ–µ –≤—Ä–µ–º—è –ø—Ä–∏–µ–º–∞:</b>\n\n"
                    "üìù <b>–§–æ—Ä–º–∞—Ç:</b> –ß–ß:–ú–ú-–ß–ß:–ú–ú (–Ω–∞–ø—Ä–∏–º–µ—Ä, 09:00-18:00)\n"
                    "üí° <i>–û—Ç–ø—Ä–∞–≤—å—Ç–µ '–≤–µ—Å—å –¥–µ–Ω—å' –¥–ª—è –ø–æ–∏—Å–∫–∞ –≤ –ª—é–±–æ–µ –≤—Ä–µ–º—è</i>",
                    reply_markup=get_schedule_cancel_keyboard(),
                )
            else:
                # –ë–µ—Å–ø–ª–∞—Ç–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ –Ω–µ –º–æ–≥—É—Ç –≤—ã–±—Ä–∞—Ç—å –≤—Ä–µ–º—è
                await state.update_data(
                    preferred_time_start=None,
                    preferred_time_end=None,
                )
                await state.set_state(ScheduleFormStates.waiting_for_confirmation)

                if callback.message.bot is None:
                    raise ValueError("Bot is None")
                # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ —Å–æ–∑–¥–∞–Ω–∏—è
                await show_schedule_confirmation(
                    callback.message.bot,
                    callback.message.chat.id,
                    callback.message.message_id,
                    state,
                )

    except Exception as e:
        logger.error(
            f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–∏ –≤—Ä–∞—á–µ–π: {e}",
        )
        await callback.message.edit_text(
            "‚ùå <b>–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞</b>\n\n"
            "–ù–µ —É–¥–∞–ª–æ—Å—å –æ–±—Ä–∞–±–æ—Ç–∞—Ç—å –≤—ã–±–æ—Ä –≤—Ä–∞—á–µ–π. "
            "–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ –∏–ª–∏ –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –≤ –ø–æ–¥–¥–µ—Ä–∂–∫—É.",
        )


async def show_schedule_confirmation(  # noqa: C901, PLR0912, PLR0915
    bot: "Bot",
    chat_id: int,
    message_id: int,
    state: FSMContext,
) -> None:
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ —Å–æ–∑–¥–∞–Ω–∏—è —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è."""
    data = await state.get_data()

    # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è
    patient_id = data.get("selected_patient_id")
    lpu_id = data.get("selected_lpu_id")
    specialist_id = data.get("selected_specialist_id")
    selected_doctors = data.get("selected_doctors", [])
    time_start = data.get("preferred_time_start")
    time_end = data.get("preferred_time_end")

    if not all([patient_id, lpu_id, specialist_id, selected_doctors]):
        await bot.edit_message_text(
            chat_id=chat_id,
            message_id=message_id,
            text=(
                "‚ùå <b>–û—à–∏–±–∫–∞: –Ω–µ–ø–æ–ª–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ</b>\n\n"
                "–ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–æ–∑–¥–∞—Ç—å —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ –∑–∞–Ω–æ–≤–æ."
            ),
        )
        await state.clear()
        return

    try:
        # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–∞—Ü–∏–µ–Ω—Ç–µ –∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ
        async with get_or_create_session() as session:
            patients_service = PatientsService(session)
            users_service = UsersService(session)
            schedules_service = SchedulesService(session)

            patient = await patients_service.get_patient_by_id(int(patient_id or 0))

            if not patient:
                await bot.edit_message_text(
                    chat_id=chat_id,
                    message_id=message_id,
                    text=(
                        "‚ùå <b>–ü–∞—Ü–∏–µ–Ω—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω</b>\n\n"
                        "–ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–æ–∑–¥–∞—Ç—å —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ –∑–∞–Ω–æ–≤–æ."
                    ),
                )
                await state.clear()
                return

            # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø–æ–¥–ø–∏—Å–∫–∏ –∏ –ª–∏–º–∏—Ç–æ–≤
            user = await users_service.get_user_by_id(patient.user_id)
            if not user:
                await bot.edit_message_text(
                    chat_id=chat_id,
                    message_id=message_id,
                    text=(
                        "‚ùå <b>–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω</b>\n\n"
                        "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /start –¥–ª—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏."
                    ),
                )
                await state.clear()
                return

            # –ü–æ–¥—Å—á–∏—Ç—ã–≤–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å—É—â–µ—Å—Ç–≤—É—é—â–∏—Ö —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–π –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ç–∞—Ä–∏—Ñ–∞
            existing_schedules = list(
                await schedules_service.find_all_by_user_id(patient.user_id),
            )

            if user.is_subscribed:
                # –ü–ª–∞—Ç–Ω—ã–µ: —Å—á–∏—Ç–∞–µ–º –∞–∫—Ç–∏–≤–Ω—ã–µ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è (–Ω–µ –æ—Ç–º–µ–Ω–µ–Ω–Ω—ã–µ)
                active_schedules = [
                    s for s in existing_schedules if s.status == ScheduleStatus.PENDING
                ]
                current_count = len(active_schedules)
                max_schedules = settings.MAX_SUBSCRIBED_SCHEDULES
            else:
                # –ë–µ—Å–ø–ª–∞—Ç–Ω—ã–µ: —Å—á–∏—Ç–∞–µ–º —Ç–æ–ª—å–∫–æ –Ω–∞–π–¥–µ–Ω–Ω—ã–µ –∑–∞–ø–∏—Å–∏ (–µ–¥–∏–Ω–æ—Ä–∞–∑–æ–≤–æ)
                found_schedules = [
                    s for s in existing_schedules if s.status == ScheduleStatus.FOUND
                ]
                current_count = len(found_schedules)
                max_schedules = settings.MAX_UNSUBSCRIBED_SCHEDULES

            patient_name = f"{patient.last_name} {patient.first_name}"
            if patient.middle_name:
                patient_name += f" {patient.middle_name}"

        # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –õ–ü–£ –∏ —Å–ø–µ—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏
        async with GorzdravAPIClient() as api_client:
            # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –õ–ü–£
            attachments_response = await api_client.get_attachments(
                polis_s=patient.polis_s,
                polis_n=patient.polis_n,
            )

            lpu_name = "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ"
            for attachment in attachments_response.result:
                if attachment.id == lpu_id:
                    lpu_name = (
                        attachment.lpu_full_name
                        or attachment.lpu_short_name
                        or "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ"
                    )
                    break

            # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Å–ø–µ—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏
            specialists_response = await api_client.get_specialists(int(lpu_id or 0))
            specialist_name = "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ"
            for specialist in specialists_response.result:
                if specialist.id == specialist_id:
                    specialist_name = specialist.name or "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ"
                    break

            # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –≤—Ä–∞—á–∞—Ö
            doctors_response = await api_client.get_doctors(
                int(lpu_id or 0),
                str(specialist_id or ""),
            )
            doctors_names: "list[str]" = []
            for doctor in doctors_response.result:
                if doctor.id in selected_doctors:
                    doctors_names.append(doctor.name or f"–í—Ä–∞—á #{doctor.id}")

        # –§–æ—Ä–º–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è
        text = "üìÖ <b>–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ —Å–æ–∑–¥–∞–Ω–∏—è —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è</b>\n\n"
        text += f"üë§ <b>–ü–∞—Ü–∏–µ–Ω—Ç:</b> {patient_name}\n"
        text += f"üè• <b>–õ–ü–£:</b> {lpu_name}\n"
        text += f"ü©∫ <b>–°–ø–µ—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è:</b> {specialist_name}\n"
        text += (
            f"üë®‚Äç‚öïÔ∏è <b>–í—Ä–∞—á–∏:</b> "
            f"{', '.join(doctors_names) if doctors_names else '–ù–µ –≤—ã–±—Ä–∞–Ω—ã'}\n"
        )

        if time_start and time_end:
            text += (
                f"‚è∞ <b>–í—Ä–µ–º—è:</b> "
                f"{dt_time.fromisoformat(time_start).strftime('%H:%M')}-{dt_time.fromisoformat(time_end).strftime('%H:%M')}\n"
            )
        else:
            text += "‚è∞ <b>–í—Ä–µ–º—è:</b> –õ—é–±–æ–µ –¥–æ—Å—Ç—É–ø–Ω–æ–µ"
            if not user.is_subscribed:
                text += " (–≤—ã–±–æ—Ä –≤—Ä–µ–º–µ–Ω–∏ –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω –±–µ–∑ –ø–æ–¥–ø–∏—Å–∫–∏)\n"
            else:
                text += "\n"

        # –î–æ–±–∞–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ª–∏–º–∏—Ç–∞—Ö
        if user.is_subscribed:
            # –ü–ª–∞—Ç–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏: –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ–± –∞–∫—Ç–∏–≤–Ω—ã—Ö —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è—Ö
            remaining_schedules = (
                max_schedules - current_count - 1
            )  # -1 –∑–∞ —Ç–µ–∫—É—â–µ–µ —Å–æ–∑–¥–∞–≤–∞–µ–º–æ–µ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ
            text += (
                f"\nüìä <b>–ê–∫—Ç–∏–≤–Ω—ã—Ö —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–π:</b> "
                f"{current_count + 1}/{max_schedules} "
                f"(–æ—Å—Ç–∞–ª–æ—Å—å: {remaining_schedules})\n"
            )
        else:
            # –ë–µ—Å–ø–ª–∞—Ç–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏: –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –Ω–∞–π–¥–µ–Ω–Ω—ã—Ö –∑–∞–ø–∏—Å—è—Ö
            remaining_found = (
                max_schedules - current_count - 1
            )  # -1 –∑–∞ —Ç–µ–∫—É—â–µ–µ —Å–æ–∑–¥–∞–≤–∞–µ–º–æ–µ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ
            text += (
                f"\nüìä <b>–ù–∞–π–¥–µ–Ω–æ –∑–∞–ø–∏—Å–µ–π:</b> "
                f"{current_count + 1}/{max_schedules} "
                f"(–æ—Å—Ç–∞–ª–æ—Å—å: {remaining_found})\n"
            )
            text += (
                "üíé <i>–î–ª—è –≤—ã–±–æ—Ä–∞ —É–¥–æ–±–Ω–æ–≥–æ –≤—Ä–µ–º–µ–Ω–∏ –∏ "
                "—É–≤–µ–ª–∏—á–µ–Ω–∏—è –ª–∏–º–∏—Ç–∞: /subscribe</i>\n"
            )

        text += "\n‚úÖ <b>–°–æ–∑–¥–∞—Ç—å —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ?</b>"

        await bot.edit_message_text(
            chat_id=chat_id,
            message_id=message_id,
            text=text,
            reply_markup=get_schedule_create_confirmation_keyboard(),
        )

    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∫–∞–∑–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è: {e}")
        await bot.edit_message_text(
            chat_id=chat_id,
            message_id=message_id,
            text=(
                "‚ùå <b>–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞</b>\n\n"
                "–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–¥–≥–æ—Ç–æ–≤–∏—Ç—å –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ. "
                "–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ –∏–ª–∏ –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –≤ –ø–æ–¥–¥–µ—Ä–∂–∫—É."
            ),
        )


@router.message(ScheduleFormStates.waiting_for_time)
async def time_input_handler(message: Message, state: FSMContext) -> None:
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –≤–≤–æ–¥ –≤—Ä–µ–º–µ–Ω–∏."""
    text = (message.text or "").strip()
    data = await state.get_data()
    message_id = data.get("message_id")

    if not message_id:
        await message.answer(
            "‚ùå <b>–û—à–∏–±–∫–∞:</b> –Ω–µ –Ω–∞–π–¥–µ–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è.",
        )
        return

    if not message.bot:
        return

    # –£–¥–∞–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    with contextlib.suppress(Exception):
        await message.delete()

    if text.lower() == "–≤–µ—Å—å –¥–µ–Ω—å":
        # –ï—Å–ª–∏ –≤—Ä–µ–º—è –Ω–µ —É–∫–∞–∑–∞–Ω–æ, –∏—Å–ø–æ–ª—å–∑—É–µ–º –ª—é–±–æ–µ –¥–æ—Å—Ç—É–ø–Ω–æ–µ
        await state.update_data(preferred_time_start=None, preferred_time_end=None)
        await state.set_state(ScheduleFormStates.waiting_for_confirmation)
        await show_schedule_confirmation(
            message.bot,
            message.chat.id,
            message_id,
            state,
        )
        return

    # –ü–∞—Ä—Å–∏–º –≤—Ä–µ–º—è –≤ —Ñ–æ—Ä–º–∞—Ç–µ –ß–ß:–ú–ú-–ß–ß:–ú–ú
    try:
        if "-" not in text:
            raise ValueError("–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –≤—Ä–µ–º–µ–Ω–∏")

        time_parts = text.split("-")
        if len(time_parts) != 2:
            raise ValueError("–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –≤—Ä–µ–º–µ–Ω–∏")

        start_time_str, end_time_str = time_parts
        start_time = dt_time.fromisoformat(start_time_str.strip())
        end_time = dt_time.fromisoformat(end_time_str.strip())

        if start_time >= end_time:
            raise ValueError("–í—Ä–µ–º—è –Ω–∞—á–∞–ª–∞ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å —Ä–∞–Ω—å—à–µ –≤—Ä–µ–º–µ–Ω–∏ –æ–∫–æ–Ω—á–∞–Ω–∏—è")

        await state.update_data(
            preferred_time_start=start_time.isoformat(),
            preferred_time_end=end_time.isoformat(),
        )
        await state.set_state(ScheduleFormStates.waiting_for_confirmation)
        await show_schedule_confirmation(
            message.bot,
            message.chat.id,
            message_id,
            state,
        )

    except ValueError as e:
        await message.bot.edit_message_text(
            chat_id=message.chat.id,
            message_id=message_id,
            text=(
                f"‚ùå <b>–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –≤—Ä–µ–º–µ–Ω–∏!</b>\n\n"
                f"üìù <b>–í–≤–µ–¥–∏—Ç–µ –ø—Ä–µ–¥–ø–æ—á—Ç–∏—Ç–µ–ª—å–Ω–æ–µ –≤—Ä–µ–º—è –ø—Ä–∏–µ–º–∞:</b>\n\n"
                f"üí° <i>–§–æ—Ä–º–∞—Ç: –ß–ß:–ú–ú-–ß–ß:–ú–ú (–Ω–∞–ø—Ä–∏–º–µ—Ä, 09:00-18:00)</i>\n"
                f"üí° <i>–û—Ç–ø—Ä–∞–≤—å—Ç–µ '–≤–µ—Å—å –¥–µ–Ω—å' –¥–ª—è –ø–æ–∏—Å–∫–∞ –≤ –ª—é–±–æ–µ –≤—Ä–µ–º—è</i>\n\n"
                f"‚ùå <b>–û—à–∏–±–∫–∞:</b> {e!s}"
            ),
            reply_markup=get_schedule_cancel_keyboard(),
        )


@router.callback_query(SchedulesMenuFactory.filter(F.action == "create_confirm"))
async def create_confirm_callback(  # noqa: C901
    callback: CallbackQuery,
    state: FSMContext,
) -> None:
    """–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–∞–µ—Ç —Å–æ–∑–¥–∞–Ω–∏–µ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è."""
    await callback.answer()

    if (
        not callback.from_user
        or not callback.message
        or isinstance(callback.message, InaccessibleMessage)
    ):
        return

    try:
        data = await state.get_data()
        patient_id = data.get("selected_patient_id")
        lpu_id = data.get("selected_lpu_id")
        specialist_id = data.get("selected_specialist_id")
        selected_doctors = data.get("selected_doctors", [])
        time_start = data.get("preferred_time_start")
        time_end = data.get("preferred_time_end")

        if not all([patient_id, lpu_id, specialist_id, selected_doctors]):
            await callback.message.edit_text(
                "‚ùå <b>–û—à–∏–±–∫–∞: –Ω–µ–ø–æ–ª–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ</b>\n\n"
                "–ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–æ–∑–¥–∞—Ç—å —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ –∑–∞–Ω–æ–≤–æ.",
            )
            await state.clear()
            return

        # –ü–æ–ª—É—á–∞–µ–º ID –ø–∞—Ü–∏–µ–Ω—Ç–∞ –≤ —Å–∏—Å—Ç–µ–º–µ –ì–æ—Ä–ó–¥—Ä–∞–≤
        async with get_or_create_session() as session:
            patients_service = PatientsService(session)
            patient = await patients_service.get_patient_by_id(int(patient_id or 0))

            if not patient:
                await callback.message.edit_text(
                    "‚ùå <b>–ü–∞—Ü–∏–µ–Ω—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω</b>\n\n"
                    "–ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–æ–∑–¥–∞—Ç—å —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ –∑–∞–Ω–æ–≤–æ.",
                )
                await state.clear()
                return

        async with GorzdravAPIClient() as api_client:
            # –ò—â–µ–º –ø–∞—Ü–∏–µ–Ω—Ç–∞ –≤ —Å–∏—Å—Ç–µ–º–µ –ì–æ—Ä–ó–¥—Ä–∞–≤
            search_response = await api_client.search_patient(
                lpu_id=int(lpu_id or 0),
                last_name=patient.last_name,
                first_name=patient.first_name,
                middle_name=patient.middle_name or "",
                birthdate_iso=patient.birth_date.isoformat(),
            )

            if not search_response.success or not search_response.result:
                await callback.message.edit_text(
                    "‚ùå <b>–ü–∞—Ü–∏–µ–Ω—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ —Å–∏—Å—Ç–µ–º–µ –ì–æ—Ä–ó–¥—Ä–∞–≤</b>\n\n"
                    "–ü—Ä–æ–≤–µ—Ä—å—Ç–µ –¥–∞–Ω–Ω—ã–µ –ø–∞—Ü–∏–µ–Ω—Ç–∞ –∏–ª–∏ –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.",
                )
                await state.clear()
                return

            gorzdrav_patient_id = search_response.result

            # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ–± –õ–ü–£
            lpu = await api_client.get_lpu_by_id(int(lpu_id or 0))
            lpu_name = (
                lpu.lpu_short_name or lpu.lpu_full_name or f"–õ–ü–£ #{lpu_id}"
                if lpu
                else f"–õ–ü–£ #{lpu_id}"
            )

            # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Å–ø–µ—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏
            specialists_response = await api_client.get_specialists(int(lpu_id or 0))
            specialist_name = f"–°–ø–µ—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è #{specialist_id}"
            if specialists_response.success and specialists_response.result:
                for spec in specialists_response.result:
                    if spec.id == specialist_id:
                        specialist_name = spec.name or specialist_name
                        break

        # –°–æ–∑–¥–∞–µ–º —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ
        async with get_or_create_session() as session:
            schedules_service = SchedulesService(session)

            schedule_data = {
                "patient_id": int(patient_id or 0),
                "lpu_id": str(lpu_id or ""),
                "gorzdrav_patient_id": gorzdrav_patient_id,
                "gorzdrav_specialist_id": str(specialist_id or ""),
                "preferred_doctors_ids": selected_doctors,
                "status": ScheduleStatus.PENDING,
            }

            if time_start and time_end:
                schedule_data["preferred_time_start"] = dt_time.fromisoformat(
                    time_start,
                )
                schedule_data["preferred_time_end"] = dt_time.fromisoformat(time_end)

            await schedules_service.add_model(Schedule(**schedule_data))

        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —É—Å–ø–µ—à–Ω–æ–µ —Å–æ–∑–¥–∞–Ω–∏–µ
        patient_name = f"{patient.last_name} {patient.first_name}"
        if patient.middle_name:
            patient_name += f" {patient.middle_name}"

        await callback.message.edit_text(
            f"‚úÖ <b>–†–∞—Å–ø–∏—Å–∞–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω–æ!</b>\n\n"
            f"üë§ <b>–ü–∞—Ü–∏–µ–Ω—Ç:</b> {patient_name}\n"
            f"üè• <b>–õ–ü–£:</b> {lpu_name}\n"
            f"ü©∫ <b>–°–ø–µ—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è:</b> {specialist_name}\n"
            f"üë®‚Äç‚öïÔ∏è <b>–í—Ä–∞—á–∏:</b> {len(selected_doctors)} –≤—ã–±—Ä–∞–Ω–æ\n\n"
            f"‚è≥ <b>–°—Ç–∞—Ç—É—Å:</b> –û–∂–∏–¥–∞–Ω–∏–µ —Ç–∞–ª–æ–Ω–∞ –¥–ª—è –∑–∞–ø–∏—Å–∏\n\n"
            f"üìã –î–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –≤—Å–µ—Ö —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–π: /schedules",
            reply_markup=get_schedule_deleted_keyboard(),
        )

        await state.clear()

    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è: {e}")
        await callback.message.edit_text(
            "‚ùå <b>–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è</b>\n\n"
            "–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ –∏–ª–∏ –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –≤ –ø–æ–¥–¥–µ—Ä–∂–∫—É.",
        )
        await state.clear()


@router.callback_query(SchedulesMenuFactory.filter(F.action == "view"))
async def view_schedule_callback(  # noqa: C901, PLR0912, PLR0915
    callback: CallbackQuery,
    callback_data: SchedulesMenuFactory,
) -> None:
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –¥–∞–Ω–Ω—ã–µ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è."""
    await callback.answer()

    if (
        not callback.from_user
        or not callback.message
        or isinstance(callback.message, InaccessibleMessage)
    ):
        return

    user_id = callback.from_user.id
    schedule_id = callback_data.schedule_id

    if schedule_id is None:
        await callback.message.edit_text(
            "‚ùå <b>–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π ID —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è</b>\n\n"
            "–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–µ—Ä–µ–π—Ç–∏ –∫ —Å–ø–∏—Å–∫—É —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–π –∑–∞–Ω–æ–≤–æ.",
        )
        return

    try:
        async with get_or_create_session() as session:
            schedules_service = SchedulesService(session)
            schedule = await schedules_service.find_one_with_patient(schedule_id)

            if not schedule or schedule.patient.user_id != user_id:
                await callback.message.edit_text(
                    "‚ùå <b>–†–∞—Å–ø–∏—Å–∞–Ω–∏–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ</b>\n\n"
                    "–í–æ–∑–º–æ–∂–Ω–æ, –æ–Ω–æ –±—ã–ª–æ —É–¥–∞–ª–µ–Ω–æ –∏–ª–∏ —É –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ –Ω–µ–º—É.",
                )
                return

            # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–∏
            patient_name = f"{schedule.patient.last_name} {schedule.patient.first_name}"
            if schedule.patient.middle_name:
                patient_name += f" {schedule.patient.middle_name}"

            status_text = {
                ScheduleStatus.PENDING.value: "‚è≥ –û–∂–∏–¥–∞–Ω–∏–µ —Ç–∞–ª–æ–Ω–∞",
                ScheduleStatus.FOUND.value: "‚úÖ –ó–∞–ø–∏—Å—å –Ω–∞–π–¥–µ–Ω–∞",
                ScheduleStatus.CANCELLED.value: "‚ùå –û—Ç–º–µ–Ω–µ–Ω–æ",
            }.get(schedule.status.value, "‚ùì –ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ")

            time_text = "–õ—é–±–æ–µ –¥–æ—Å—Ç—É–ø–Ω–æ–µ"
            if schedule.preferred_time_start and schedule.preferred_time_end:
                time_text = (
                    f"{schedule.preferred_time_start.strftime('%H:%M')}"
                    f"-{schedule.preferred_time_end.strftime('%H:%M')}"
                )

            async with GorzdravAPIClient() as api_client:
                # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ–± –õ–ü–£
                lpu_name = f"–õ–ü–£ #{schedule.lpu_id}"
                try:
                    lpu = await api_client.get_lpu_by_id(int(schedule.lpu_id))
                    if lpu:
                        lpu_name = lpu.lpu_full_name or lpu.lpu_short_name or lpu_name
                except Exception as e:
                    logger.warning(
                        f"Error getting LPU info for {schedule.lpu_id}: {e}",
                    )

                # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Å–ø–µ—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏
                specialist_name = f"–°–ø–µ—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è #{schedule.gorzdrav_specialist_id}"
                try:
                    specialists_response = await api_client.get_specialists(
                        int(schedule.lpu_id),
                    )
                    if specialists_response.success and specialists_response.result:
                        for spec in specialists_response.result:
                            if spec.id == schedule.gorzdrav_specialist_id:
                                specialist_name = spec.name or specialist_name
                                break
                except Exception as e:
                    logger.warning(
                        f"Error getting specialist info for "
                        f"{schedule.gorzdrav_specialist_id}: {e}",
                    )

                # –ü–æ–ª—É—á–∞–µ–º –∏–º–µ–Ω–∞ –≤—Ä–∞—á–µ–π
                doctors_names: list[str] = []
                if schedule.preferred_doctors_ids:
                    try:
                        doctors_response = await api_client.get_doctors(
                            int(schedule.lpu_id),
                            schedule.gorzdrav_specialist_id,
                        )
                        if doctors_response.success and doctors_response.result:
                            for doctor_id in schedule.preferred_doctors_ids:
                                for doctor in doctors_response.result:
                                    if str(doctor.id) == doctor_id:
                                        doctors_names.append(doctor.name)
                                        break
                                else:
                                    doctors_names.append(f"–í—Ä–∞—á #{doctor_id}")
                    except Exception as e:
                        logger.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –≤—Ä–∞—á–∞—Ö: {e}")
                        doctors_names = [
                            f"–í—Ä–∞—á #{doctor_id}"
                            for doctor_id in schedule.preferred_doctors_ids
                        ]

            doctors_text = ", ".join(doctors_names) if doctors_names else "–ù–µ –≤—ã–±—Ä–∞–Ω—ã"

            schedule_text = (
                "üìÖ <b>–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–∏</b>\n\n"
                f"üë§ <b>–ü–∞—Ü–∏–µ–Ω—Ç:</b> {patient_name}\n"
                f"üè• <b>–õ–ü–£:</b> {lpu_name}\n"
                f"ü©∫ <b>–°–ø–µ—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è:</b> {specialist_name}\n"
                f"üë®‚Äç‚öïÔ∏è <b>–í—Ä–∞—á–∏:</b> {doctors_text}\n"
                f"‚è∞ <b>–í—Ä–µ–º—è:</b> {time_text}\n"
                f"üìä <b>–°—Ç–∞—Ç—É—Å:</b> {status_text}\n"
                f"üìÖ <b>–°–æ–∑–¥–∞–Ω–æ:</b> "
                f"{schedule.created_at.strftime('%d.%m.%Y %H:%M')}\n\n"
                "üí° <i>–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫–∏ –Ω–∏–∂–µ –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ–º</i>"
            )

            keyboard = get_schedule_view_keyboard(schedule.id)

            await callback.message.edit_text(
                schedule_text,
                reply_markup=keyboard,
            )

    except Exception as e:
        logger.error(
            f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ—Å–º–æ—Ç—Ä–µ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è {schedule_id}: {e}",
        )
        await callback.message.edit_text(
            "‚ùå <b>–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞</b>\n\n"
            "–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–∏. "
            "–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ –∏–ª–∏ –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –≤ –ø–æ–¥–¥–µ—Ä–∂–∫—É.",
        )


@router.callback_query(SchedulesMenuFactory.filter(F.action == "delete"))
async def delete_schedule_callback(
    callback: CallbackQuery,
    callback_data: SchedulesMenuFactory,
) -> None:
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ —É–¥–∞–ª–µ–Ω–∏—è —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è."""
    await callback.answer()

    if (
        not callback.from_user
        or not callback.message
        or isinstance(callback.message, InaccessibleMessage)
    ):
        return

    user_id = callback.from_user.id
    schedule_id = callback_data.schedule_id

    if schedule_id is None:
        await callback.message.edit_text(
            "‚ùå <b>–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π ID —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è</b>\n\n"
            "–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–µ—Ä–µ–π—Ç–∏ –∫ —Å–ø–∏—Å–∫—É —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–π –∑–∞–Ω–æ–≤–æ.",
        )
        return

    try:
        async with get_or_create_session() as session:
            schedules_service = SchedulesService(session)
            schedule = await schedules_service.find_one_with_patient(schedule_id)

            if not schedule or schedule.patient.user_id != user_id:
                await callback.message.edit_text(
                    "‚ùå <b>–†–∞—Å–ø–∏—Å–∞–Ω–∏–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ</b>\n\n"
                    "–í–æ–∑–º–æ–∂–Ω–æ, –æ–Ω–æ –±—ã–ª–æ —É–¥–∞–ª–µ–Ω–æ –∏–ª–∏ —É –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ –Ω–µ–º—É.",
                )
                return

            keyboard = get_schedule_delete_keyboard(schedule.id)

            await callback.message.edit_text(
                "‚ö†Ô∏è <b>–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ —É–¥–∞–ª–µ–Ω–∏—è</b>\n\n"
                "–í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ —É–¥–∞–ª–∏—Ç—å —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ?\n\n"
                "‚ö†Ô∏è <i>–≠—Ç–æ –¥–µ–π—Å—Ç–≤–∏–µ –Ω–µ–ª—å–∑—è –±—É–¥–µ—Ç –æ—Ç–º–µ–Ω–∏—Ç—å</i>",
                reply_markup=keyboard,
            )

    except Exception as e:
        logger.error(
            f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è {schedule_id}: {e}",
        )
        await callback.message.edit_text(
            "‚ùå <b>–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞</b>\n\n"
            "–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–¥–≥–æ—Ç–æ–≤–∏—Ç—å —É–¥–∞–ª–µ–Ω–∏–µ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è. "
            "–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ –∏–ª–∏ –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –≤ –ø–æ–¥–¥–µ—Ä–∂–∫—É.",
        )


@router.callback_query(SchedulesMenuFactory.filter(F.action == "delete_confirm"))
async def delete_schedule_confirm_callback(
    callback: CallbackQuery,
    callback_data: SchedulesMenuFactory,
) -> None:
    """–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–∞–µ—Ç —É–¥–∞–ª–µ–Ω–∏–µ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è."""
    await callback.answer()

    if (
        not callback.from_user
        or not callback.message
        or isinstance(callback.message, InaccessibleMessage)
    ):
        return

    user_id = callback.from_user.id
    schedule_id = callback_data.schedule_id

    if schedule_id is None:
        await callback.message.edit_text(
            "‚ùå <b>–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π ID —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è</b>\n\n"
            "–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–µ—Ä–µ–π—Ç–∏ –∫ —Å–ø–∏—Å–∫—É —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–π –∑–∞–Ω–æ–≤–æ.",
        )
        return

    try:
        async with get_or_create_session() as session:
            schedules_service = SchedulesService(session)
            schedule = await schedules_service.find_one_with_patient(schedule_id)

            if not schedule or schedule.patient.user_id != user_id:
                await callback.message.edit_text(
                    "‚ùå <b>–†–∞—Å–ø–∏—Å–∞–Ω–∏–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ</b>\n\n"
                    "–í–æ–∑–º–æ–∂–Ω–æ, –æ–Ω–æ —É–∂–µ –±—ã–ª–æ —É–¥–∞–ª–µ–Ω–æ –∏–ª–∏ —É –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ –Ω–µ–º—É.",
                )
                return

            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –§–ò–û –¥–ª—è —Å–æ–æ–±—â–µ–Ω–∏—è –æ–± —É—Å–ø–µ—Ö–µ
            patient_name = f"{schedule.patient.last_name} {schedule.patient.first_name}"
            if schedule.patient.middle_name:
                patient_name += f" {schedule.patient.middle_name}"

            # –£–¥–∞–ª—è–µ–º —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ
            await schedules_service.delete(schedule_id)

            keyboard = get_schedule_deleted_keyboard()

            await callback.message.edit_text(
                f"‚úÖ <b>–†–∞—Å–ø–∏—Å–∞–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω–æ</b>\n\n"
                f"üë§ <b>–ü–∞—Ü–∏–µ–Ω—Ç:</b> {patient_name}\n\n"
                f"üóëÔ∏è <i>–í—Å–µ –¥–∞–Ω–Ω—ã–µ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è –±—ã–ª–∏ —É–¥–∞–ª–µ–Ω—ã –∏–∑ —Å–∏—Å—Ç–µ–º—ã</i>",
                reply_markup=keyboard,
            )

            logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} —É–¥–∞–ª–∏–ª —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ {schedule_id}")

    except Exception as e:
        logger.error(
            f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–∏ —É–¥–∞–ª–µ–Ω–∏—è —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è {schedule_id}: {e}",
        )
        await callback.message.edit_text(
            "‚ùå <b>–û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è</b>\n\n"
            "–ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ. "
            "–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ –∏–ª–∏ –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –≤ –ø–æ–¥–¥–µ—Ä–∂–∫—É.",
        )
