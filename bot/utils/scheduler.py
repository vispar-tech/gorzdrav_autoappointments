from __future__ import annotations
import asyncio
from dataclasses import dataclass
from typing import Optional
from datetime import time
from loguru import logger

from bot.api.client import GorzdravAPIClient, GorzdravAPIException
from bot.api.models import AppointmentCreateRequest, Appointment
from bot.database.repositories import PatientRepository
from bot.database.repositories import ScheduleRepository
from bot.database.models import Schedule, Patient
from bot.loader import bot


@dataclass
class SchedulerConfig:
    interval_seconds: int = 10


class AppointmentScheduler:
    def __init__(self, config: SchedulerConfig | None = None):
        self._config = config or SchedulerConfig()
        self._task: Optional[asyncio.Task[None]] = None
        self._stopped = asyncio.Event()

    async def start(self) -> None:
        if self._task and not self._task.done():
            return
        self._stopped.clear()
        self._task = asyncio.create_task(self._run_loop())
        logger.info("AppointmentScheduler started")

    async def stop(self) -> None:
        self._stopped.set()
        if self._task:
            await self._task
        logger.info("AppointmentScheduler stopped")

    async def _run_loop(self) -> None:
        try:
            while not self._stopped.is_set():
                await self._tick()
                try:
                    await asyncio.wait_for(
                        self._stopped.wait(), timeout=self._config.interval_seconds
                    )
                except asyncio.TimeoutError:
                    pass
        except Exception as e:
            logger.exception(f"Scheduler crashed: {e}")

    async def _tick(self) -> None:
        # –ü—Ä–æ—Ö–æ–¥–∏–º –ø–æ –ø–∞—Ü–∏–µ–Ω—Ç–∞–º —Å —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è–º–∏ –∏ –∏—â–µ–º —Å–ª–æ—Ç—ã
        schedules = await ScheduleRepository().get_schedules_by_status("pending")
        if not schedules:
            return

        async with GorzdravAPIClient() as client:
            for schedule in schedules:
                try:
                    await self._process_schedule(schedule, client)
                except Exception as e:
                    logger.error(f"–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è {schedule.id}: {e}")

    async def _process_schedule(
        self, schedule: Schedule, client: GorzdravAPIClient
    ) -> None:
        """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –æ–¥–Ω–æ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ: –∏—â–µ—Ç —Å–ª–æ—Ç—ã, —Å–æ–∑–¥–∞–µ—Ç –∑–∞–ø–∏—Å—å, —É–≤–µ–¥–æ–º–ª—è–µ—Ç, —É–¥–∞–ª—è–µ—Ç"""
        patient = await PatientRepository().get_patient_by_id(schedule.patient_id)
        if not patient or not patient.prefer_lpu_id:
            logger.warning(
                f"–ü–∞—Ü–∏–µ–Ω—Ç {schedule.patient_id} –Ω–µ –Ω–∞–π–¥–µ–Ω –∏–ª–∏ –Ω–µ—Ç prefer_lpu_id"
            )
            return

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ gorzdrav_id
        if not patient.gorzdrav_id:
            logger.warning(f"–£ –ø–∞—Ü–∏–µ–Ω—Ç–∞ {patient.id} –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç gorzdrav_id")
            return

        # –ü–æ–ª—É—á–∞–µ–º —Å–ª–æ—Ç—ã –ø–æ –≤—ã–±—Ä–∞–Ω–Ω—ã–º –¥–æ–∫—Ç–æ—Ä–∞–º
        doctors = await client.get_doctors(
            int(patient.prefer_lpu_id), schedule.specialist_id
        )
        doctor_ids = (
            schedule.preferred_doctors
            if schedule.preferred_doctors
            else [d.id for d in doctors.result]
        )

        # –°–æ–∑–¥–∞–µ–º —Å–ª–æ–≤–∞—Ä—å –¥–ª—è –±—ã—Å—Ç—Ä–æ–≥–æ –ø–æ–∏—Å–∫–∞ –∏–º–µ–Ω –¥–æ–∫—Ç–æ—Ä–æ–≤
        doctor_names = {d.id: d.name for d in doctors.result}

        # –ò—â–µ–º –ø–æ–¥—Ö–æ–¥—è—â–∏–µ –∞–ø–æ–π—Ç–º–µ–Ω—Ç—ã —É –∫–∞–∂–¥–æ–≥–æ –≤—Ä–∞—á–∞
        start_t = schedule.preferred_time_start or time(0, 0)
        end_t = schedule.preferred_time_end or time(23, 59)

        for doctor_id in doctor_ids:
            doctor_name = doctor_names.get(doctor_id, f"ID:{doctor_id}")

            try:
                appointments = await client.get_appointments(
                    int(patient.prefer_lpu_id), doctor_id
                )
            except GorzdravAPIException as e:
                if e.error_code == 39:
                    logger.info(
                        f"–ù–µ—Ç –Ω–æ–º–µ—Ä–∫–æ–≤ –¥–ª—è –¥–æ–∫—Ç–æ—Ä–∞ {doctor_name}: {e.error_code}"
                    )
                else:
                    logger.warning(
                        f"–ù–µ —É–¥–∞–µ—Ç—Å—è –ø–æ–ª—É—á–∏—Ç—å –∑–∞–ø–∏—Å–∏ –¥–ª—è –¥–æ–∫—Ç–æ—Ä–∞ {doctor_name}: {e.error_code}"
                    )
                continue
            except Exception as e:
                logger.warning(
                    f"–ù–µ —É–¥–∞–µ—Ç—Å—è –ø–æ–ª—É—á–∏—Ç—å –∑–∞–ø–∏—Å–∏ –¥–ª—è –¥–æ–∫—Ç–æ—Ä–∞ {doctor_name}: {e}"
                )
                continue

            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–¥—Ö–æ–¥—è—â–∏–µ —Å–ª–æ—Ç—ã
            for appointment in appointments.result:
                appointment_time = appointment.visitStart.time()
                if start_t <= appointment_time <= end_t:
                    # –ù–∞–π–¥–µ–Ω –ø–æ–¥—Ö–æ–¥—è—â–∏–π —Å–ª–æ—Ç - —Å–æ–∑–¥–∞–µ–º –∑–∞–ø–∏—Å—å
                    try:
                        await self._create_appointment_and_notify(
                            client, schedule, patient, appointment, doctor_name
                        )
                        return  # –í—ã—Ö–æ–¥–∏–º –ø–æ—Å–ª–µ —É—Å–ø–µ—à–Ω–æ–π –∑–∞–ø–∏—Å–∏
                    except Exception as e:
                        logger.error(
                            f"–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –∑–∞–ø–∏—Å–∏ –¥–ª—è —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è {schedule.id}: {e}"
                        )
                        continue

    async def _create_appointment_and_notify(
        self,
        client: GorzdravAPIClient,
        schedule: Schedule,
        patient: Patient,
        appointment: Appointment,
        doctor_name: str,
    ) -> None:
        """–°–æ–∑–¥–∞–µ—Ç –∑–∞–ø–∏—Å—å, –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –∏ —É–¥–∞–ª—è–µ—Ç —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ"""
        try:
            # –°–æ–∑–¥–∞–µ–º –∑–∞–ø–∏—Å—å –Ω–∞ –ø—Ä–∏–µ–º
            create_request = AppointmentCreateRequest(
                lpuId=int(patient.prefer_lpu_id),
                patientId=patient.gorzdrav_id,
                appointmentId=appointment.id,
                patientLastName=patient.last_name,
                patientFirstName=patient.first_name,
                patientMiddleName=patient.middle_name,
                patientBirthdate=patient.birth_date.isoformat(),
                visitDate=appointment.visitStart.isoformat(),
                room=appointment.room,
                address=appointment.address,
                esiaId=None,
                referralId=None,
                ipmpiCardId=None,
                recipientEmail=patient.user.email,
            )

            create_response = await client.create_appointment(create_request)
            logger.info(f"–ó–∞–ø–∏—Å—å —Å–æ–∑–¥–∞–Ω–∞ –¥–ª—è –ø–∞—Ü–∏–µ–Ω—Ç–∞ {patient.id}: {create_response}")

            # –£–¥–∞–ª—è–µ–º —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ
            await ScheduleRepository.delete_schedule(schedule.id)
            logger.info(f"–†–∞—Å–ø–∏—Å–∞–Ω–∏–µ {schedule.id} —É–¥–∞–ª–µ–Ω–æ –ø–æ—Å–ª–µ —É—Å–ø–µ—à–Ω–æ–π –∑–∞–ø–∏—Å–∏")

            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
            await self._send_notification(patient, appointment, doctor_name)

        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –≤ –ø—Ä–æ—Ü–µ—Å—Å–µ —Å–æ–∑–¥–∞–Ω–∏—è –∑–∞–ø–∏—Å–∏: {e}")
            raise

    async def _send_notification(
        self,
        patient: Patient,
        appointment: Appointment,
        doctor_name: str,
    ) -> None:
        """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é –æ —Å–æ–∑–¥–∞–Ω–Ω–æ–π –∑–∞–ø–∏—Å–∏"""
        try:
            user_id = patient.user_id
            appointment_date = appointment.visitStart.strftime("%d.%m.%Y %H:%M")
            appointment_end = appointment.visitEnd.strftime("%H:%M")

            message = (
                f"üéâ <b>–ó–∞–ø–∏—Å—å –Ω–∞ –ø—Ä–∏–µ–º —Å–æ–∑–¥–∞–Ω–∞!</b>\n\n"
                f"üë§ <b>–ü–∞—Ü–∏–µ–Ω—Ç:</b> {patient.last_name} {patient.first_name} {patient.middle_name}\n"
                f"üë®‚Äç‚öïÔ∏è <b>–í—Ä–∞—á:</b> {doctor_name}\n"
                f"üìÖ <b>–î–∞—Ç–∞ –∏ –≤—Ä–µ–º—è:</b> {appointment_date}-{appointment_end}\n"
                f"‚úÖ –í–∞—à–µ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ —É–¥–∞–ª–µ–Ω–æ"
            )

            await bot.send_message(user_id, message)
            logger.info(f"–£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user_id}")

        except Exception as e:
            logger.error(
                f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {patient.user_id}: {e}"
            )
